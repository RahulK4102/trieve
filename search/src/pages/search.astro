---
import SearchLayout from "../layouts/SearchLayout.astro";
import Footer from "../components/Footer.astro";
import ResultsPage, { Filters } from "../components/ResultsPage";
import type { ChunksWithTotalPagesDTO } from "../../utils/apiTypes";
import SearchForm from "../components/SearchForm";
import { SuggestedQueries } from "../components/SuggestedQueries";

const apiHost = import.meta.env.PUBLIC_API_HOST as string;
const alwaysRequireAuth = import.meta.env.PUBLIC_ALWAYS_REQUIRE_AUTH as string;
const dataset = import.meta.env.PUBLIC_DATASET as string;

const requestParams = Astro.request.url.split("?")[1];
const params = new URLSearchParams(requestParams);
const query = params.get("q") ?? "";
const page = Number(params.get("page")) || 1;
const searchType: string = params.get("searchType") ?? "semantic";
const weight = params.get("weight") ?? "0.5";

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const metadataFilters: any = {};

params.forEach((value, key) => {
  if (
    key === "q" ||
    key === "page" ||
    key === "searchType" ||
    key === "Tag Set" ||
    key === "link" ||
    key === "start" ||
    key === "end" ||
    key === "weight"
  ) {
    return;
  }

  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
  metadataFilters[key] = value.split(",");
});

const dataTypeFilters: Filters = {
  tagSet: params.get("Tag Set")?.split(",") ?? [],
  link: params.get("link")?.split(",") ?? [],
  start: params.get("start") ?? "",
  end: params.get("end") ?? "",
  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
  metadataFilters,
};

let initialScoreChunks: ChunksWithTotalPagesDTO = {
  score_chunks: [],
  total_chunk_pages: 0,
};

try {
  if (alwaysRequireAuth === "on") {
    throw new Error("Always require auth is on");
  }

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const requestBody: any = {
    content: query,
    tag_set: dataTypeFilters.tagSet,
    link: dataTypeFilters.link,
    time_range:
      dataTypeFilters.start || dataTypeFilters.end
        ? [
            dataTypeFilters.start
              ? dataTypeFilters.start + " 00:00:00"
              : "null",
            dataTypeFilters.end ? dataTypeFilters.end + " 00:00:00" : "null",
          ]
        : null,
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    filters: dataTypeFilters.metadataFilters,
    search_type: searchType,
  };

  if (searchType === "hybrid") {
    const semanticWeight = parseFloat(weight || "0.5");
    if (semanticWeight != 0.5) {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
      requestBody.weights = [semanticWeight, 1 - semanticWeight];
    } else {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
      requestBody.cross_encoder = true;
    }
  }

  const initialScoreChunksResult = await fetch(
    `${apiHost}/chunk/search/${page}`,
    {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "AF-Dataset": dataset,
      },
      credentials: "include",
      body: JSON.stringify(requestBody),
    },
  );

  if (!initialScoreChunksResult.ok) {
    throw new Error(
      `Failed to fetch initial score chunks: ${initialScoreChunksResult.status}`,
    );
  }

  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
  const initialScoreChunksJson = await initialScoreChunksResult.json();
  initialScoreChunks = initialScoreChunksJson as ChunksWithTotalPagesDTO;
} catch (e) {
  console.error(e);
}
---

<style is:inline>
  mark > p {
    display: inline;
  }

  mark > div {
    display: inline;
  }

  .dark mark > p {
    color: white;
  }

  .dark mark > div {
    color: white;
  }
</style>

<SearchLayout title={`${query} | Arguflow Search`}>
  <div class="max-w-6xl mx-auto w-full">
    <div
      class="mt-8 mx-auto w-full max-w-[calc(100%-32px)] min-[360px]:max-w-[calc(100%-64px)] px-4 sm:px-8 md:px-20"
    >
      <SearchForm
        query={query}
        filters={dataTypeFilters}
        searchType={searchType}
        weight={weight}
        client:load
      />
      <SuggestedQueries query={query} client:only />
    </div>
  </div>

  <ResultsPage
    page={page}
    query={query}
    filters={dataTypeFilters}
    defaultResultChunks={initialScoreChunks}
    searchType={searchType}
    weight={weight}
    client:load
  />
  <div class="flex-1"></div>
  <Footer />
</SearchLayout>
