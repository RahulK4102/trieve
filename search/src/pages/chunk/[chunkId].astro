---
import Footer from "../../components/Footer.astro";
import SearchLayout from "../../layouts/SearchLayout.astro";
import { SingleChunkPage } from "../../components/SingleChunkPage";
import {
  isChunkMetadataWithVotes,
  type ChunkMetadataWithVotes,
  type SingleChunkDTO,
} from "../../../utils/apiTypes";

const apiHost = import.meta.env.PUBLIC_API_HOST as string;
const dataset = import.meta.env.PUBLIC_DATASET as string;

const { chunkId } = Astro.params;

let title = "Arguflow Search";
let specificChunks: SingleChunkDTO;

try {

  const specificChunk = await fetch(`${apiHost}/chunk/${chunkId ?? ""}`, {
    method: "GET",
    headers: {
      "AF-Dataset": dataset,
    },
  });
  const specificChunkJson = (await specificChunk.json()) as unknown;

  if (!isChunkMetadataWithVotes(specificChunkJson)) {
    throw new Error("Invalid chunk metadata");
  }

  specificChunks = {
    metadata: specificChunkJson,
    status: specificChunk.status,
  };

  title = `${(specificChunks.metadata?.content ?? "")
    .split(/ +/)
    .slice(0, 5)
    .join(" ")} | Arguflow Search`;
} catch (e) {
  specificChunks = { metadata: null, status: 404 };
  title = "Arguflow Search";
}
---

<SearchLayout title={title}>
  <SingleChunkPage
    chunkId={chunkId}
    defaultResultChunk={specificChunks as {
      metadata: ChunkMetadataWithVotes;
      status: number;
    }}
    client:load
  />
  <div class="flex-1"></div>
  <Footer />
</SearchLayout>../../components/SingleChunkPage
