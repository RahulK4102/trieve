{
  "version": 3,
  "sources": ["../../fetch-client/src/index.ts", "../src/index.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { $OpenApiTs } from \"./types.gen\";\nexport type * from \"./types.gen\";\n\ntype HttpMethod = \"get\" | \"post\" | \"put\" | \"delete\" | \"patch\";\ntype Paths = keyof $OpenApiTs;\ntype MethodsForPath<P extends Paths> = keyof $OpenApiTs[P];\n\ntype SuccessStatusCode =\n  | 200\n  | 201\n  | 202\n  | 203\n  | 204\n  | 205\n  | 206\n  | 207\n  | 208\n  | 226;\n\ntype RenameFields<T> = {\n  [K in keyof T as K extends \"trDataset\"\n    ? \"datasetId\"\n    : K extends \"trOrganization\"\n      ? \"organizationId\"\n      : K extends \"requestBody\"\n        ? \"data\"\n        : K]: T[K];\n};\n\ntype RequestParams<\n  P extends Paths,\n  M extends MethodsForPath<P>,\n> = $OpenApiTs[P][M] extends { req: infer R } ? RenameFields<R> : never;\n\nexport type RequestBody<\n  P extends Paths,\n  M extends MethodsForPath<P>,\n> = $OpenApiTs[P][M] extends {\n  req: {\n    requestBody: infer R;\n  };\n}\n  ? R\n  : never;\n\nexport type ResponseBody<\n  P extends Paths,\n  M extends MethodsForPath<P>,\n> = $OpenApiTs[P][M] extends { res: infer R }\n  ? R extends { [K in SuccessStatusCode]?: any }\n    ? R[Extract<keyof R, SuccessStatusCode>]\n    : never\n  : never;\n\ntype EjectOption = \"eject\" | false;\n\ntype EjectedRequestBase<T> = {\n  datasetId?: string;\n  organizationId?: string;\n  data?: T;\n  [key: string]: any;\n};\n\nfunction camelcaseToSnakeCase(str: string) {\n  return str.replace(/[A-Z]/g, (letter) => `_${letter.toLowerCase()}`);\n}\n\n// Convert camelcase to snake case and replace\nfunction replacePathParams(\n  path: string,\n  params: Record<string, string>,\n): string {\n  for (const [key, value] of Object.entries(params)) {\n    path = path.replace(`{${camelcaseToSnakeCase(key)}}`, value);\n  }\n  return path;\n}\n\nfunction isObject(value: unknown): value is Record<string, unknown> {\n  return typeof value === \"object\" && value !== null;\n}\n\ninterface TrieveOpts {\n  apiKey?: string;\n  baseUrl: string;\n  debug?: boolean;\n}\n\nexport class Trieve {\n  private apiKey?: string;\n  private baseUrl: string;\n  private debug: boolean = false;\n\n  constructor(opts: TrieveOpts) {\n    this.apiKey = opts.apiKey;\n    this.baseUrl = opts.baseUrl;\n    this.debug = opts.debug || false;\n  }\n\n  async fetch<\n    EJECT extends EjectOption = false,\n    URQ = EJECT extends \"eject\" ? EjectedRequestBase<any> : never,\n    URE = EJECT extends \"eject\" ? unknown : never,\n    P extends Paths = Paths,\n    M extends EJECT extends false\n      ? MethodsForPath<P> & HttpMethod\n      : any = MethodsForPath<P> & HttpMethod,\n  >(\n    path: P,\n    method: EJECT extends false ? M : HttpMethod,\n    params?: EJECT extends false ? RequestParams<P, M> : URQ,\n  ): Promise<EJECT extends false ? ResponseBody<P, M> : URE> {\n    let requestBody: unknown;\n\n    const headers: Record<string, string> = {\n      \"Content-Type\": \"application/json\",\n    };\n    if (this.apiKey) {\n      headers[\"Authorization\"] = `Bearer ${this.apiKey}`;\n    }\n\n    const pathParams: Record<string, string> = {};\n\n    if (isObject(params)) {\n      if (\"data\" in params && isObject(params.data)) {\n        requestBody = params.data;\n      }\n\n      for (const [key, value] of Object.entries(params)) {\n        if (key === \"datasetId\" && typeof value === \"string\") {\n          headers[\"TR-Dataset\"] = value;\n        } else if (key === \"organizationId\" && typeof value === \"string\") {\n          headers[\"TR-Organization\"] = value;\n        } else if (key === \"xApiVersion\" && typeof value === \"string\") {\n          headers[\"X-API-VERSION\"] = value;\n        }\n        // Check if the key is in the path as path params\n        const snakedKey = camelcaseToSnakeCase(key);\n        if (path.includes(`{${snakedKey}}`) && typeof value === \"string\") {\n          pathParams[key] = value;\n        }\n      }\n    }\n\n    const updatedPath = replacePathParams(path, pathParams);\n\n    if (this.debug) {\n      console.info(\"Sending request: \", {\n        url: this.baseUrl + updatedPath,\n        method,\n        headers,\n        body: requestBody,\n      });\n    }\n\n    const response = await fetch(this.baseUrl + updatedPath, {\n      credentials: \"include\",\n      method,\n      headers: headers,\n      body: requestBody ? JSON.stringify(requestBody) : undefined,\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${await response.text()}`);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    const responseObject = await response.json();\n    if (this.debug) {\n      console.info(\"Response: \", responseObject);\n    }\n    return responseObject;\n  }\n}\n", "import { Trieve } from \"trieve-fetch-client\";\n\nexport class TrieveSDK {\n  trieve: any;\n  constructor(apiKey: string, baseUrl = \"http://localhost:8090\") {\n    this.trieve = new Trieve({\n      apiKey: apiKey,\n      baseUrl: baseUrl,\n      debug: false,\n    });\n  }\n\n  search() {}\n}\n"],
  "mappings": ";AAgEA,SAAS,qBAAqB,KAAa;AACzC,SAAO,IAAI,QAAQ,UAAU,CAAC,WAAW,IAAI,OAAO,YAAY,CAAC,EAAE;AACrE;AAGA,SAAS,kBACP,MACA,QACQ;AACR,aAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,MAAM,GAAG;AACjD,WAAO,KAAK,QAAQ,IAAI,qBAAqB,GAAG,CAAC,KAAK,KAAK;EAC7D;AACA,SAAO;AACT;AAEA,SAAS,SAAS,OAAkD;AAClE,SAAO,OAAO,UAAU,YAAY,UAAU;AAChD;AAQO,IAAM,SAAN,MAAa;EAKlB,YAAY,MAAkB;AAF9B,SAAQ,QAAiB;AAGvB,SAAK,SAAS,KAAK;AACnB,SAAK,UAAU,KAAK;AACpB,SAAK,QAAQ,KAAK,SAAS;EAC7B;EAEA,MAAM,MASJ,MACA,QACA,QACyD;AACzD,QAAI;AAEJ,UAAM,UAAkC;MACtC,gBAAgB;IAClB;AACA,QAAI,KAAK,QAAQ;AACf,cAAQ,eAAe,IAAI,UAAU,KAAK,MAAM;IAClD;AAEA,UAAM,aAAqC,CAAC;AAE5C,QAAI,SAAS,MAAM,GAAG;AACpB,UAAI,UAAU,UAAU,SAAS,OAAO,IAAI,GAAG;AAC7C,sBAAc,OAAO;MACvB;AAEA,iBAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,MAAM,GAAG;AACjD,YAAI,QAAQ,eAAe,OAAO,UAAU,UAAU;AACpD,kBAAQ,YAAY,IAAI;QAC1B,WAAW,QAAQ,oBAAoB,OAAO,UAAU,UAAU;AAChE,kBAAQ,iBAAiB,IAAI;QAC/B,WAAW,QAAQ,iBAAiB,OAAO,UAAU,UAAU;AAC7D,kBAAQ,eAAe,IAAI;QAC7B;AAEA,cAAM,YAAY,qBAAqB,GAAG;AAC1C,YAAI,KAAK,SAAS,IAAI,SAAS,GAAG,KAAK,OAAO,UAAU,UAAU;AAChE,qBAAW,GAAG,IAAI;QACpB;MACF;IACF;AAEA,UAAM,cAAc,kBAAkB,MAAM,UAAU;AAEtD,QAAI,KAAK,OAAO;AACd,cAAQ,KAAK,qBAAqB;QAChC,KAAK,KAAK,UAAU;QACpB;QACA;QACA,MAAM;MACR,CAAC;IACH;AAEA,UAAM,WAAW,MAAM,MAAM,KAAK,UAAU,aAAa;MACvD,aAAa;MACb;MACA;MACA,MAAM,cAAc,KAAK,UAAU,WAAW,IAAI;IACpD,CAAC;AAED,QAAI,CAAC,SAAS,IAAI;AAChB,YAAM,IAAI,MAAM,uBAAuB,MAAM,SAAS,KAAK,CAAC,EAAE;IAChE;AAGA,UAAM,iBAAiB,MAAM,SAAS,KAAK;AAC3C,QAAI,KAAK,OAAO;AACd,cAAQ,KAAK,cAAc,cAAc;IAC3C;AACA,WAAO;EACT;AACF;;;AC5KO,IAAM,YAAN,MAAgB;AAAA,EAErB,YAAY,QAAgB,UAAU,yBAAyB;AAC7D,SAAK,SAAS,IAAI,OAAO;AAAA,MACvB;AAAA,MACA;AAAA,MACA,OAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA,EAEA,SAAS;AAAA,EAAC;AACZ;",
  "names": []
}
