services:
  db:
    image: postgres:15
    restart: always
    volumes: 
      - ./docker/postgres/pg-multi-db.sh:/docker-entrypoint-initdb.d/initdb.sh
      - pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER} 
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      KC_DB_USERNAME: ${KC_DB_USERNAME}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD}
      KC_DB: ${KC_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 10
    ports:
      - "5432:5432"

  keycloak:
    image: quay.io/keycloak/keycloak:23.0.7
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: aintsecure
      KC_DB_URL: jdbc:postgresql://db:5432/${KC_DB}
      KC_DB: postgres
      KC_DB_USERNAME: ${KC_DB_USERNAME}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD}
      KC_HEALTH_ENABLED: true
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "exec 3<>/dev/tcp/127.0.0.1/8080;echo -e \"GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n\" >&3;grep \"HTTP/1.1 200 OK\" <&3",
        ]
      interval: 10s
      timeout: 5s
      retries: 20 # Account for keycloak db starting up and taking time.
    ports:
      - 8080:8080
    volumes:
      - keycloak-data:/opt/keycloak/data
      - ./docker/keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json
      - ./docker/keycloak/themes/trieve:/opt/keycloak/themes/trieve
    entrypoint: "/opt/keycloak/bin/kc.sh start-dev --import-realm --spi-theme-static-max-age=-1 --spi-theme-cache-themes=false --spi-theme-cache-templates=false"
    depends_on:
      db:
        condition: service_healthy

  s3:
    image: minio/minio:latest
    volumes:
      - ./docker/minio/docker-entrypoint.sh:/docker-entrypoint.sh
      - s3-data:/data
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      MINIO_ROOT_USER: &access_key minioadmin
      MINIO_ROOT_PASSWORD: &secret_key minioadmin
      S3_ACCESS_KEY: &s3_access_key ${S3_ACCESS_KEY}
      S3_SECRET_KEY: &s3_secret_key ${S3_SECRET_KEY}
      S3_BUCKET: &bucketname ${S3_BUCKET}
    healthcheck:
      test: ["CMD", "mc", "ready", "${S3_BUCKET}"]
      interval: 5s
      timeout: 5s
      retries: 10
    entrypoint: ["/docker-entrypoint.sh"]
    command: minio server --console-address ":9001" /data

  redis:
    image: redis:7.2.2
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
    environment:
      REDIS_PASSWORD: &redispassword ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    
  tika:
    image: apache/tika:2.9.1.0-full
    healthcheck:
      test: [
        "CMD-SHELL",
        "curl -f -I http://localhost:9998/version 2>&1 | grep 'HTTP/1.[01] 200 OK' || exit 1"
      ]
      interval: 10s
      timeout: 5s
      retries: 10
    ports:
      - 9998:9998

  qdrant-database:
    image: qdrant/qdrant:v1.8.0
    environment:
      QDRANT__SERVICE__API_KEY: &qdrant_api_key aintsecure
    ports:
      - 6333:6333
      - 6334:6334
    
  # splade-embeddings:
  #   image: trieve/embedding-server:demo
  #   ports:
  #     - 7070:7070
  #   environment:
  #     - HF_TOKEN=${HF_TOKEN}
  #     - API_KEY=${OPENAI_API_KEY}

  ingestion-service:
    image: trieve/ingest:demo
    depends_on:
      - tika
      - db
      - qdrant-database
      - redis
    env_file:
      .env

  server:
    image: trieve/server-no-ocr:demo
    environment:
      ADMIN_API_KEY: ${ADMIN_API_KEY}
      BASE_SERVER_URL: ${BASE_SERVER_URL}
      REDIS_URL: ${REDIS_URL}
      QDRANT_URL: http://qdrant-database:6334
      QDRANT_API_KEY: *qdrant_api_key
      DATABASE_URL: ${DATABASE_URL}
      SMTP_RELAY: ${SMTP_RELAY}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_EMAIL_ADDRESS: ${SMTP_EMAIL_ADDRESS}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      LLM_API_KEY: ${LLM_API_KEY}
      SECRET_KEY: ${SECRET_KEY}
      SALT: ${SALT}
      AWS_REGION: "us-east-1"
      S3_ENDPOINT: http://s3:9000
      S3_ACCESS_KEY: *s3_access_key
      S3_SECRET_KEY: *s3_secret_key
      S3_BUCKET: *bucketname
      COOKIE_SECURE: false
      QDRANT_COLLECTION: ${QDRANT_COLLECTION}
      TIKA_URL: http://tika:9998
      OPENAI_BASE_URL: ${OPENAI_BASE_URL}
      ADMIN_DASHBOARD_URL: ${ADMIN_DASHBOARD_URL}
      OIDC_CLIENT_SECRET: ${OIDC_CLIENT_SECRET}
      OIDC_CLIENT_ID: ${OIDC_CLIENT_ID}
      OIDC_AUTH_REDIRECT_URL: ${OIDC_AUTH_REDIRECT_URL}
      OIDC_ISSUER_URL: ${OIDC_ISSUER_URL}
      GPU_SERVER_ORIGIN: ${GPU_SERVER_ORIGIN}
      SPARSE_SERVER_ORIGIN: ${SPARSE_SERVER_ORIGIN}
      EMBEDDING_SERVER_ORIGIN: ${EMBEDDING_SERVER_ORIGIN}
      RERANKER_SERVER_ORIGIN: ${RERANKER_SERVER_ORIGIN}
      UNLIMITED: true
      RUST_BACKTRACE: 1
    ports:
      - 8090:8090
    depends_on:
      tika:
        condition: service_healthy
      db:
        condition: service_healthy
      qdrant-database:
        condition: service_started
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy

  chat:
    image: trieve/chat:demo
    ports:
      - 3000:80
    environment:
      VITE_FRONTMATTER_VALS: "link,tag_set"
      VITE_API_HOST: "http://localhost:8090/api"
      VITE_SEARCH_UI_URL: "http://localhost:3001"

  search:
    image: trieve/search:demo
    ports:
      - 3001:80
    environment:
      VITE_API_HOST: "http://localhost:8090/api"

volumes:
  redis-data: {}
  script-redis-data: {}
  pgdata: {}
  qdrant_data: {}
  s3-data: {}
  keycloak-data: {}
