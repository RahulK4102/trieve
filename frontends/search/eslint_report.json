[{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/HomeSearch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/components/Atoms/AfMessage.tsx","messages":[],"suppressedMessages":[{"ruleId":"solid/no-innerhtml","severity":2,"message":"The innerHTML attribute is dangerous; passing unsanitized input can lead to security vulnerabilities.","line":54,"column":19,"nodeType":"JSXAttribute","messageId":"dangerous","endLine":54,"endColumn":71,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/components/Atoms/ComboboxChecklist.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/components/Atoms/ConfirmModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/components/Atoms/DatePicker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/components/Atoms/FullScreenModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/components/Atoms/InputRowsForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/components/Atoms/Navbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/components/Atoms/PaginationController.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/components/BookmarkPopover.tsx","messages":[{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":241,"column":11,"nodeType":"Identifier","messageId":"unboundWithoutThisAnnotation","endLine":241,"endColumn":17},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":241,"column":19,"nodeType":"Identifier","messageId":"unboundWithoutThisAnnotation","endLine":241,"endColumn":27}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  For,\n  Setter,\n  Show,\n  createEffect,\n  createSignal,\n  useContext,\n} from \"solid-js\";\nimport {\n  Menu,\n  MenuItem,\n  Popover,\n  PopoverButton,\n  PopoverPanel,\n} from \"solid-headless\";\nimport { RiSystemAddFill } from \"solid-icons/ri\";\nimport {\n  isChunkGroupPageDTO,\n  type ChunkBookmarksDTO,\n  type ChunkGroupDTO,\n  type ChunkMetadata,\n} from \"../utils/apiTypes\";\nimport InputRowsForm from \"./Atoms/InputRowsForm\";\nimport { BiRegularChevronLeft, BiRegularChevronRight } from \"solid-icons/bi\";\nimport { DatasetAndUserContext } from \"./Contexts/DatasetAndUserContext\";\nimport { AiOutlineGroup } from \"solid-icons/ai\";\nimport { Tooltip } from \"shared/ui\";\n\nexport interface BookmarkPopoverProps {\n  chunkMetadata: ChunkMetadata;\n  chunkGroups: ChunkGroupDTO[];\n  totalGroupPages: number;\n  setLoginModal?: Setter<boolean>;\n  bookmarks: ChunkBookmarksDTO[];\n  setChunkGroups?: Setter<ChunkGroupDTO[]>;\n}\n\nconst BookmarkPopover = (props: BookmarkPopoverProps) => {\n  const apiHost = import.meta.env.VITE_API_HOST as string;\n  const datasetAndUserContext = useContext(DatasetAndUserContext);\n  const $currentUser = datasetAndUserContext.user;\n  const $dataset = datasetAndUserContext.currentDataset;\n\n  const [refetchingChunkGroups, setRefetchingChunkGroups] = createSignal(false);\n  const [refetchingBookmarks, setRefetchingBookmarks] = createSignal(false);\n  const [showGroupForm, setShowGroupForm] = createSignal(false);\n  const [notLoggedIn, setNotLoggedIn] = createSignal(false);\n  const [groupFormTitle, setGroupFormTitle] = createSignal(\"\");\n  const [usingPanel, setUsingPanel] = createSignal(false);\n  const [bookmarks, setBookmarks] = createSignal<ChunkBookmarksDTO[]>([]);\n  const [localGroupPage, setLocalGroupPage] = createSignal(1);\n  const [localChunkGroups, setLocalChunkGroups] = createSignal<ChunkGroupDTO[]>(\n    [],\n  );\n\n  createEffect(() => {\n    const groupsToAdd: ChunkGroupDTO[] = [];\n    props.bookmarks.forEach((b) => {\n      b.slim_groups.forEach((c) => {\n        groupsToAdd.push({\n          id: c.id,\n          name: c.name,\n          description: \"\",\n          created_at: \"\",\n          updated_at: \"\",\n        });\n      });\n    });\n\n    setBookmarks(props.bookmarks);\n    setLocalChunkGroups([...groupsToAdd, ...props.chunkGroups]);\n  });\n\n  createEffect((prevPage) => {\n    const curPage = localGroupPage();\n    if (curPage == prevPage) {\n      return curPage;\n    }\n\n    const chunkBookmarks = bookmarks();\n    const setChunkGroups = props.setChunkGroups;\n    refetchGroups(curPage, chunkBookmarks, setChunkGroups);\n\n    return curPage;\n  }, 1);\n\n  createEffect(() => {\n    if ($currentUser?.()?.id === undefined) {\n      return;\n    }\n    if (!refetchingChunkGroups()) {\n      return;\n    }\n\n    const curPage = localGroupPage();\n    const chunkBookmarks = bookmarks();\n    const setChunkGroups = props.setChunkGroups;\n    refetchGroups(curPage, chunkBookmarks, setChunkGroups);\n    setRefetchingChunkGroups(false);\n  });\n\n  createEffect(() => {\n    if ($currentUser?.()?.id === undefined) {\n      return;\n    }\n    if (!refetchingBookmarks()) {\n      return;\n    }\n\n    const curGroupPage = localGroupPage();\n    refetchBookmarks(curGroupPage);\n    setRefetchingBookmarks(false);\n  });\n\n  const refetchGroups = (\n    curPage: number,\n    chunkBookmarks: ChunkBookmarksDTO[],\n    setChunkGroups: Setter<ChunkGroupDTO[]> | undefined,\n  ) => {\n    const currentDataset = $dataset?.();\n    if (!currentDataset) return;\n\n    void fetch(\n      `${apiHost}/dataset/groups/${\n        currentDataset.dataset.id\n      }/${localGroupPage()}`,\n      {\n        method: \"GET\",\n        headers: {\n          \"X-API-version\": \"2.0\",\n          \"TR-Dataset\": currentDataset.dataset.id,\n        },\n        credentials: \"include\",\n      },\n    ).then((response) => {\n      if (!setChunkGroups) return;\n\n      if (response.ok) {\n        void response.json().then((data) => {\n          if (isChunkGroupPageDTO(data)) {\n            if (curPage !== 1) {\n              setLocalChunkGroups(data.groups);\n              return;\n            }\n\n            const groupsToAdd: ChunkGroupDTO[] = [];\n\n            chunkBookmarks.forEach((chunkBookmark) => {\n              chunkBookmark.slim_groups.forEach((group) => {\n                const chunkGroup: ChunkGroupDTO = {\n                  id: group.id,\n                  name: group.name,\n                  description: \"\",\n                  created_at: \"\",\n                  updated_at: \"\",\n                };\n\n                groupsToAdd.push(chunkGroup);\n              });\n            });\n\n            const deDupedPrev = data.groups.filter((group) => {\n              return (\n                groupsToAdd.find((groupToAdd) => groupToAdd.id == group.id) ==\n                undefined\n              );\n            });\n\n            const updatedGroups = [...groupsToAdd, ...deDupedPrev];\n            setLocalChunkGroups(updatedGroups);\n            setChunkGroups(updatedGroups);\n          }\n        });\n      }\n\n      if (response.status == 401) {\n        setNotLoggedIn(true);\n      }\n    });\n  };\n\n  const refetchBookmarks = (curPage: number) => {\n    const currentDataset = $dataset?.();\n    if (!currentDataset) return;\n\n    void fetch(`${apiHost}/chunk_group/chunks`, {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        \"X-API-version\": \"2.0\",\n        \"Content-Type\": \"application/json\",\n        \"TR-Dataset\": currentDataset.dataset.id,\n      },\n      body: JSON.stringify({\n        chunk_ids: [props.chunkMetadata.id],\n      }),\n    }).then((response) => {\n      if (response.ok) {\n        void response.json().then((data) => {\n          const chunkBookmarks = data as ChunkBookmarksDTO[];\n\n          setBookmarks(chunkBookmarks);\n\n          if (curPage !== 1) {\n            return;\n          }\n\n          const groupsToAdd: ChunkGroupDTO[] = [];\n\n          chunkBookmarks.forEach((chunkBookmark) => {\n            chunkBookmark.slim_groups.forEach((group) => {\n              const chunkGroup: ChunkGroupDTO = {\n                id: group.id,\n                name: group.name,\n                description: \"\",\n                created_at: \"\",\n                updated_at: \"\",\n              };\n\n              groupsToAdd.push(chunkGroup);\n            });\n          });\n\n          setLocalChunkGroups((prev) => {\n            const deDupedPrev = prev.filter((group) => {\n              return (\n                groupsToAdd.find((groupToAdd) => groupToAdd.id == group.id) ==\n                undefined\n              );\n            });\n\n            return [...groupsToAdd, ...deDupedPrev];\n          });\n        });\n      }\n    });\n  };\n\n  return (\n    <Popover defaultOpen={false} class=\"relative\">\n      {({ isOpen, setState }) => (\n        <div>\n          <div class=\"flex items-center\">\n            <Tooltip\n              body={\n                <PopoverButton\n                  onClick={() => {\n                    if (notLoggedIn() || $currentUser?.()?.id === undefined) {\n                      props.setLoginModal?.(true);\n                      return;\n                    }\n                    refetchBookmarks(localGroupPage());\n                  }}\n                >\n                  <AiOutlineGroup class=\"z-0 h-5 w-5 fill-current\" />\n                </PopoverButton>\n              }\n              tooltipText=\"Manage Groups For This Chunk\"\n              direction=\"left\"\n            />\n          </div>\n          <Show\n            when={\n              (isOpen() || usingPanel()) &&\n              !notLoggedIn() &&\n              !($currentUser?.()?.id === undefined)\n            }\n          >\n            <PopoverPanel\n              unmount={false}\n              class=\"absolute z-50 w-screen max-w-xs -translate-x-[300px] translate-y-1\"\n              onMouseEnter={() => setUsingPanel(true)}\n              onMouseLeave={() => setUsingPanel(false)}\n              onClick={() => setState(true)}\n            >\n              <Menu class=\"flex w-full flex-col justify-end space-y-2 overflow-hidden rounded bg-white py-4 shadow-2xl dark:bg-shark-700\">\n                <div class=\"mb-3 w-full px-4 text-center text-lg font-bold\">\n                  Manage Groups For This Chunk\n                </div>\n                <MenuItem as=\"button\" aria-label=\"Empty\" />\n                <div class=\"max-w-screen mx-1 max-h-[20vh] transform justify-end space-y-2 overflow-y-auto rounded px-4 scrollbar-thin scrollbar-track-neutral-200 scrollbar-thumb-neutral-600 scrollbar-track-rounded-md scrollbar-thumb-rounded-md dark:scrollbar-track-neutral-700 dark:scrollbar-thumb-neutral-400\">\n                  <For each={localChunkGroups()}>\n                    {(group, idx) => {\n                      return (\n                        <>\n                          <Show when={idx() != 0}>\n                            <div class=\"h-px w-full bg-neutral-200 dark:bg-neutral-700\" />\n                          </Show>\n                          <div class=\"flex w-full items-center justify-between space-x-2\">\n                            <a\n                              href={`/group/${group.id}?dataset=${$dataset?.()\n                                ?.dataset.id}`}\n                              class=\"max-w-[80%] break-all underline\"\n                            >\n                              {group.name}\n                            </a>\n\n                            <input\n                              type=\"checkbox\"\n                              checked={\n                                bookmarks().find((bookmark) =>\n                                  bookmark.slim_groups\n                                    .map((slimGroup) => slimGroup.id)\n                                    .includes(group.id),\n                                )\n                                  ? true\n                                  : false\n                              }\n                              onChange={(e) => {\n                                const currentDataset = $dataset?.();\n                                if (!currentDataset) return;\n                                void fetch(\n                                  `${apiHost}/chunk_group/chunk/${group.id}`,\n                                  {\n                                    method: e.currentTarget.checked\n                                      ? \"POST\"\n                                      : \"DELETE\",\n                                    headers: {\n                                      \"X-API-version\": \"2.0\",\n                                      \"Content-Type\": \"application/json\",\n                                      \"TR-Dataset\": currentDataset.dataset.id,\n                                    },\n                                    body: JSON.stringify({\n                                      chunk_id: props.chunkMetadata.id,\n                                    }),\n                                    credentials: \"include\",\n                                  },\n                                ).then((response) => {\n                                  if (!response.ok) {\n                                    e.currentTarget.checked =\n                                      !e.currentTarget.checked;\n                                  }\n                                  setRefetchingBookmarks(true);\n                                });\n                                setState(true);\n                              }}\n                              class=\"h-4 w-4 cursor-pointer rounded-sm border-gray-300 bg-neutral-500 accent-turquoise focus:ring-neutral-200 dark:border-neutral-700 dark:focus:ring-neutral-600\"\n                            />\n                          </div>\n                        </>\n                      );\n                    }}\n                  </For>\n                  <div class=\"flex items-center justify-between\">\n                    <div />\n                    <div class=\"flex items-center\">\n                      <div class=\"text-sm text-neutral-400\">\n                        {localGroupPage()} /{\" \"}\n                        {props.totalGroupPages == 0 ? 1 : props.totalGroupPages}\n                      </div>\n                      <button\n                        class=\"disabled:text-neutral-400 dark:disabled:text-neutral-500\"\n                        disabled={localGroupPage() == 1}\n                        onClick={() => {\n                          setState(true);\n                          setLocalGroupPage((prev) => prev - 1);\n                        }}\n                      >\n                        <BiRegularChevronLeft class=\"h-6 w-6 fill-current\" />\n                      </button>\n                      <button\n                        class=\"disabled:text-neutral-400 dark:disabled:text-neutral-500\"\n                        disabled={\n                          localGroupPage() ==\n                          (props.totalGroupPages == 0\n                            ? 1\n                            : props.totalGroupPages)\n                        }\n                        onClick={() => {\n                          setState(true);\n                          setLocalGroupPage((prev) => prev + 1);\n                        }}\n                      >\n                        <BiRegularChevronRight class=\"h-6 w-6 fill-current\" />\n                      </button>\n                    </div>\n                  </div>\n                </div>\n                <Show when={showGroupForm()}>\n                  <div class=\"mx-4 rounded bg-gray-100 py-2 dark:bg-neutral-800\">\n                    <div class=\"px-2 text-lg font-bold\">Create New Group</div>\n                    <div>\n                      <InputRowsForm\n                        createButtonText=\"Create group\"\n                        onCreate={() => {\n                          const title = groupFormTitle();\n                          if (title.trim() == \"\") return;\n                          const currentDataset = $dataset?.();\n                          if (!currentDataset) return;\n                          void fetch(`${apiHost}/chunk_group`, {\n                            method: \"POST\",\n                            headers: {\n                              \"X-API-version\": \"2.0\",\n                              \"Content-Type\": \"application/json\",\n                              \"TR-Dataset\": currentDataset.dataset.id,\n                            },\n                            credentials: \"include\",\n                            body: JSON.stringify({\n                              name: title,\n                              description: \"\",\n                            }),\n                          }).then(() => {\n                            setRefetchingChunkGroups(true);\n                            setShowGroupForm(false);\n                            setGroupFormTitle(\"\");\n                            setState(true);\n                          });\n                        }}\n                        onCancel={() => {\n                          setShowGroupForm(false);\n                          setState(true);\n                        }}\n                        inputGroups={[\n                          {\n                            label: \"Title\",\n                            inputValue: groupFormTitle,\n                            setInputValue: setGroupFormTitle,\n                          },\n                        ]}\n                      />\n                    </div>\n                  </div>\n                </Show>\n                {!showGroupForm() && (\n                  <div class=\"px-4 pt-4\">\n                    <MenuItem\n                      as=\"button\"\n                      onClick={() => {\n                        setShowGroupForm(true);\n                        setState(true);\n                      }}\n                      class=\"flex w-full items-center justify-center rounded-full border border-green-500 bg-transparent px-2 text-lg text-green-500\"\n                    >\n                      <RiSystemAddFill class=\"h-5 w-5 fill-current\" />\n                      <p> Create New Group </p>\n                    </MenuItem>\n                  </div>\n                )}\n              </Menu>\n            </PopoverPanel>\n          </Show>\n        </div>\n      )}\n    </Popover>\n  );\n};\n\nexport default BookmarkPopover;\n","usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/components/ChatPopup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/components/ChunkMetadataDisplay.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":278,"column":29,"nodeType":"MemberExpression","messageId":"anyAssignment","endLine":278,"endColumn":63,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":278,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":278,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10459,10462],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10459,10462],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [key] on an `any` value.","line":278,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":278,"endColumn":62,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":292,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":292,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11292,11295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11292,11295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [key] on an `any` value.","line":292,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":292,"endColumn":66,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"solid/no-innerhtml","severity":2,"message":"The innerHTML attribute is dangerous; passing unsanitized input can lead to security vulnerabilities.","line":314,"column":13,"nodeType":"JSXAttribute","messageId":"dangerous","endLine":320,"endColumn":15,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":355,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":355,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14068,14071],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14068,14071],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [metadataKey] on an `any` value.","line":355,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":355,"endColumn":69,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":359,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":359,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14343,14346],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14343,14346],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [metadataKey] on an `any` value.","line":359,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":359,"endColumn":68,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":362,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":362,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14568,14571],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14568,14571],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [metadataKey] on an `any` value.","line":362,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":362,"endColumn":66,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/components/Contexts/DatasetAndUserContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/components/CreateNewDocChunkForm.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1187,1190],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1187,1190],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":80,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":80,"endColumn":49,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":80,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3232,3235],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3232,3235],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .tinymce on an `any` value.","line":80,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":80,"endColumn":30,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3430,3433],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3430,3433],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .location on an `any` value.","line":97,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":97,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":105,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":105,"endColumn":40,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .metadata on an `any` value.","line":105,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":105,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .fulltext_boost on an `any` value.","line":109,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":109,"endColumn":33,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .semantic_boost on an `any` value.","line":116,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":116,"endColumn":33,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .num_value on an `any` value.","line":123,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":123,"endColumn":28,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .time_stamp on an `any` value.","line":128,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":128,"endColumn":29,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .tracking_id on an `any` value.","line":132,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":132,"endColumn":30,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .semantic_content on an `any` value.","line":136,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":136,"endColumn":35,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/components/DatasetSelectBox.tsx","messages":[{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":55,"column":13,"nodeType":"Identifier","messageId":"unboundWithoutThisAnnotation","endLine":55,"endColumn":19},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":55,"column":21,"nodeType":"Identifier","messageId":"unboundWithoutThisAnnotation","endLine":55,"endColumn":29}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FaSolidCheck } from \"solid-icons/fa\";\nimport {\n  Show,\n  For,\n  createMemo,\n  useContext,\n  Switch,\n  Match,\n  createSignal,\n  createEffect,\n} from \"solid-js\";\nimport {\n  Menu,\n  MenuItem,\n  Popover,\n  PopoverButton,\n  PopoverPanel,\n} from \"solid-headless\";\nimport { DatasetAndUserContext } from \"./Contexts/DatasetAndUserContext\";\nimport { FiChevronDown, FiChevronUp } from \"solid-icons/fi\";\nimport { DatasetAndUsageDTO } from \"../utils/apiTypes\";\nimport createFuzzySearch from \"@nozbe/microfuzz\";\n\nexport const DatasetSelectBox = () => {\n  const datasetAndUserContext = useContext(DatasetAndUserContext);\n\n  const [datasetSearchQuery, setDatasetSearchQuery] = createSignal(\"\");\n\n  const $datasetsAndUsages = datasetAndUserContext.datasetsAndUsages;\n  const $currentDataset = datasetAndUserContext.currentDataset;\n\n  const datasetList = createMemo(() => $datasetsAndUsages?.());\n  const [datasetSearchResults, setDatasetSearchResults] = createSignal<\n    DatasetAndUsageDTO[]\n  >([]);\n\n  createEffect(() => {\n    const datasetListOrEmpty = datasetList() ?? [];\n    if (datasetSearchQuery() === \"\") {\n      setDatasetSearchResults(datasetListOrEmpty);\n    } else {\n      const fuzzy = createFuzzySearch(datasetListOrEmpty, {\n        getText: (item: DatasetAndUsageDTO) => {\n          return [item.dataset.name];\n        },\n      });\n      const results = fuzzy(datasetSearchQuery() ?? \"\");\n      setDatasetSearchResults(results.map((result) => result.item));\n    }\n  });\n\n  return (\n    <Show when={$datasetsAndUsages?.().length != 0}>\n      <Popover defaultOpen={false} class=\"relative\">\n        {({ isOpen, setState }) => (\n          <>\n            <PopoverButton\n              aria-label=\"Toggle filters\"\n              type=\"button\"\n              class=\"flex min-w-fit items-center space-x-1 pb-1 text-sm\"\n            >\n              <span class=\"line-clamp-1 min-w-fit text-left text-sm\">\n                {$currentDataset?.()?.dataset.name}\n              </span>\n              <Switch>\n                <Match when={isOpen()}>\n                  <FiChevronUp class=\"h-3.5 w-3.5\" />\n                </Match>\n                <Match when={!isOpen()}>\n                  <FiChevronDown class=\"h-3.5 w-3.5\" />\n                </Match>\n              </Switch>\n            </PopoverButton>\n            <Show when={isOpen()}>\n              <PopoverPanel\n                unmount={false}\n                class=\"absolute right-0 z-10 mt-2 h-fit w-[180px] rounded-md border bg-white dark:bg-neutral-800\"\n              >\n                <Menu class=\"mx-0.5 max-h-[70vh] space-y-0.5 overflow-y-auto overflow-x-hidden p-1 scrollbar-thin scrollbar-track-neutral-200 scrollbar-thumb-neutral-600 scrollbar-track-rounded-md scrollbar-thumb-rounded-md dark:scrollbar-track-neutral-700 dark:scrollbar-thumb-neutral-400\">\n                  <Show when={$datasetsAndUsages?.().length ?? 0 > 5}>\n                    <input\n                      placeholder=\"Search datasets...\"\n                      class=\"mb-2 flex w-full items-center justify-between rounded bg-neutral-300 p-1 text-sm text-black outline-none dark:bg-neutral-700 dark:hover:text-white dark:focus:text-white\"\n                      onInput={(e) => {\n                        setDatasetSearchQuery(e.target.value);\n                      }}\n                      value={datasetSearchQuery()}\n                    />\n                  </Show>\n\n                  <For each={datasetSearchResults().slice(0, 500)}>\n                    {(datasetItem) => {\n                      return (\n                        <MenuItem\n                          as=\"button\"\n                          classList={{\n                            \"flex w-full items-center justify-between rounded p-1 focus:text-black focus:outline-none dark:hover:text-white dark:focus:text-white hover:bg-neutral-300 hover:dark:bg-neutral-700\":\n                              true,\n                            \"bg-neutral-300 dark:bg-neutral-700\":\n                              datasetItem.dataset.id ===\n                              $currentDataset?.()?.dataset.id,\n                          }}\n                          onClick={(e: Event) => {\n                            e.preventDefault();\n                            e.stopPropagation();\n                            datasetAndUserContext.setCurrentDataset(\n                              datasetItem,\n                            );\n                            setState(false);\n                          }}\n                        >\n                          <div class=\"break-all px-1 text-left text-sm\">\n                            {datasetItem.dataset.name}\n                          </div>\n                          <Show\n                            when={\n                              datasetItem.dataset.id ==\n                              $currentDataset?.()?.dataset.id\n                            }\n                          >\n                            <span>\n                              <FaSolidCheck class=\"text-sm\" />\n                            </span>\n                          </Show>\n                        </MenuItem>\n                      );\n                    }}\n                  </For>\n                </Menu>\n              </PopoverPanel>\n            </Show>\n          </>\n        )}\n      </Popover>\n    </Show>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/components/EditChunkPageForm.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":103,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":103,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .forEach on an `any` value.","line":103,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":103,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":103,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3799,3802],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3799,3802],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":105,"column":33,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":105,"endColumn":41,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":105,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":105,"endColumn":41,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":135,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":135,"endColumn":49,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":135,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4727,4730],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4727,4730],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .tinymce on an `any` value.","line":135,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":135,"endColumn":30,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":148,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5028,5031],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5028,5031],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .location on an `any` value.","line":162,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":162,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .fulltext_boost on an `any` value.","line":169,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":169,"endColumn":33,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .semantic_boost on an `any` value.","line":176,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":176,"endColumn":33,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/components/FilterModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/components/Footer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/components/GroupPage.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":162,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":162,"endColumn":34,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":162,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":162,"endColumn":34,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":283,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":283,"endColumn":34,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .total_pages on an `any` value.","line":284,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":284,"endColumn":45,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .chunks on an `any` value.","line":285,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":285,"endColumn":54,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":427,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":427,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13452,13455],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13452,13455],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .results on an `any` value.","line":459,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":459,"endColumn":43,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .chunks on an `any` value.","line":471,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":471,"endColumn":42,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/components/ImageModal.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .signed_url on an `any` value.","line":54,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":54,"endColumn":44,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"solid/reactivity","severity":1,"message":"The reactive variable 'i' should be used within JSX, a tracked scope (like createEffect), or inside an event handler function, or else changes will be ignored.","line":84,"column":64,"nodeType":"CallExpression","messageId":"untrackedReactive","endLine":84,"endColumn":67,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/components/OrgGroupPageView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/components/OrganizationSelectBox.tsx","messages":[{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":24,"column":15,"nodeType":"Identifier","messageId":"unboundWithoutThisAnnotation","endLine":24,"endColumn":21},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":24,"column":23,"nodeType":"Identifier","messageId":"unboundWithoutThisAnnotation","endLine":24,"endColumn":31}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Show, For, createMemo, useContext, Switch, Match } from \"solid-js\";\nimport {\n  Menu,\n  MenuItem,\n  Popover,\n  PopoverButton,\n  PopoverPanel,\n} from \"solid-headless\";\nimport { FaSolidCheck } from \"solid-icons/fa\";\nimport { DatasetAndUserContext } from \"./Contexts/DatasetAndUserContext\";\nimport { FiChevronDown, FiChevronUp } from \"solid-icons/fi\";\n\nexport const OrganizationSelectBox = () => {\n  const datasetAndUserContext = useContext(DatasetAndUserContext);\n\n  const $organizations = datasetAndUserContext.organizations;\n  const organizationsList = createMemo(() => $organizations?.());\n  const $currentOrganization = datasetAndUserContext.currentOrganization;\n\n  return (\n    <div>\n      <div class=\"flex flex-col\">\n        <Popover defaultOpen={false} class=\"relative\">\n          {({ isOpen, setState }) => (\n            <>\n              <PopoverButton\n                aria-label=\"Toggle filters\"\n                type=\"button\"\n                class=\"flex items-center space-x-1 pb-1 text-sm\"\n              >\n                <span class=\"line-clamp-1 text-left text-sm\">\n                  {$currentOrganization?.()?.name}\n                </span>\n                <Switch>\n                  <Match when={isOpen()}>\n                    <FiChevronUp class=\"h-3.5 w-3.5\" />\n                  </Match>\n                  <Match when={!isOpen()}>\n                    <FiChevronDown class=\"h-3.5 w-3.5\" />\n                  </Match>\n                </Switch>\n              </PopoverButton>\n              <Show when={isOpen()}>\n                <PopoverPanel\n                  unmount={false}\n                  class=\"absolute left-0 z-10 mt-2 h-fit w-[180px] rounded-md border bg-white p-1 dark:bg-neutral-800\"\n                >\n                  <Menu class=\"mx-1 space-y-0.5\">\n                    <For each={organizationsList()}>\n                      {(organizationItem) => {\n                        const onClick = (e: Event) => {\n                          e.preventDefault();\n                          e.stopPropagation();\n                          datasetAndUserContext.setCurrentOrganization(\n                            organizationItem,\n                          );\n                          setState(false);\n                        };\n                        return (\n                          <MenuItem\n                            as=\"button\"\n                            classList={{\n                              \"flex w-full items-center justify-between rounded p-1 focus:text-black focus:outline-none dark:hover:text-white dark:focus:text-white hover:bg-neutral-300 hover:dark:bg-neutral-700\":\n                                true,\n                              \"bg-neutral-300 dark:bg-neutral-700\":\n                                organizationItem.id ===\n                                $currentOrganization?.()?.id,\n                            }}\n                            onClick={onClick}\n                          >\n                            <div class=\"flex flex-row justify-start space-x-2\">\n                              <span class=\"line-clamp-1 text-left text-sm\">\n                                {organizationItem.name}\n                              </span>\n                            </div>\n                            {organizationItem.id ==\n                              $currentOrganization?.()?.id && (\n                              <span>\n                                <FaSolidCheck class=\"text-sm\" />\n                              </span>\n                            )}\n                          </MenuItem>\n                        );\n                      }}\n                    </For>\n                  </Menu>\n                </PopoverPanel>\n              </Show>\n            </>\n          )}\n        </Popover>\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/components/ResultsPage.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .groups on an `any` value.","line":126,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":126,"endColumn":42,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .total_pages on an `any` value.","line":128,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":128,"endColumn":51,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":160,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":160,"endColumn":34,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":160,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":160,"endColumn":34,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":271,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":271,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8249,8252],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8249,8252],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [\"sort_by\"] on an `any` value.","line":313,"column":23,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":313,"endColumn":32,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [\"extend_results\"] on an `any` value.","line":324,"column":23,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":324,"endColumn":39,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":350,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":350,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11174,11177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11174,11177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .results on an `any` value.","line":352,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":352,"endColumn":47,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .total_pages on an `any` value.","line":353,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":353,"endColumn":45,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":354,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":354,"endColumn":34,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":361,"column":15,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":361,"endColumn":44,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .chunks on an `any` value.","line":361,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":361,"endColumn":44,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":362,"column":15,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":371,"endColumn":17,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":362,"column":33,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":362,"endColumn":52,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .map on an `any` value.","line":362,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":362,"endColumn":52,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":362,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":362,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11682,11685],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11682,11685],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `{}`.","line":363,"column":34,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":363,"endColumn":39,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":365,"column":21,"nodeType":"Property","messageId":"anyAssignment","endLine":365,"endColumn":33,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of an `any` typed value.","line":369,"column":19,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":369,"endColumn":32,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":372,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":372,"endColumn":34,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .total_pages on an `any` value.","line":374,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":374,"endColumn":45,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `any` value.","line":377,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":377,"endColumn":39,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":399,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":399,"endColumn":38,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":399,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":399,"endColumn":38,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/components/ScoreChunk.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":158,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4743,4746],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4743,4746],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":169,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":169,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5111,5114],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5111,5114],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":173,"column":21,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":173,"endColumn":34,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toString on an `any` value.","line":173,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":173,"endColumn":34,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `{}`.","line":188,"column":34,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":188,"endColumn":39,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [subKey] on an `any` value.","line":196,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":196,"endColumn":57,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of an `any` typed value.","line":205,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":205,"endColumn":80,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":205,"column":54,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":205,"endColumn":68,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toString on an `any` value.","line":205,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":205,"endColumn":68,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":414,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":414,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14881,14884],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14881,14884],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [key] on an `any` value.","line":414,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":414,"endColumn":60,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"solid/no-innerhtml","severity":2,"message":"The innerHTML attribute is dangerous; passing unsanitized input can lead to security vulnerabilities.","line":448,"column":13,"nodeType":"JSXAttribute","messageId":"dangerous","endLine":453,"endColumn":15,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":488,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":488,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18216,18219],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18216,18219],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [metadataKey] on an `any` value.","line":488,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":488,"endColumn":69,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":492,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":492,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18491,18494],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18491,18494],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [metadataKey] on an `any` value.","line":492,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":492,"endColumn":68,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":495,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":495,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18716,18719],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18716,18719],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [metadataKey] on an `any` value.","line":495,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":495,"endColumn":66,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/components/SearchForm.tsx","messages":[{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":487,"column":19,"nodeType":"Identifier","messageId":"unboundWithoutThisAnnotation","endLine":487,"endColumn":25},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":487,"column":27,"nodeType":"Identifier","messageId":"unboundWithoutThisAnnotation","endLine":487,"endColumn":35},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":729,"column":19,"nodeType":"Identifier","messageId":"unboundWithoutThisAnnotation","endLine":729,"endColumn":25},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":729,"column":27,"nodeType":"Identifier","messageId":"unboundWithoutThisAnnotation","endLine":729,"endColumn":35},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":814,"column":19,"nodeType":"Identifier","messageId":"unboundWithoutThisAnnotation","endLine":814,"endColumn":25},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":814,"column":27,"nodeType":"Identifier","messageId":"unboundWithoutThisAnnotation","endLine":814,"endColumn":35},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":889,"column":19,"nodeType":"Identifier","messageId":"unboundWithoutThisAnnotation","endLine":889,"endColumn":25},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":889,"column":27,"nodeType":"Identifier","messageId":"unboundWithoutThisAnnotation","endLine":889,"endColumn":35},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":1011,"column":19,"nodeType":"Identifier","messageId":"unboundWithoutThisAnnotation","endLine":1011,"endColumn":25}],"suppressedMessages":[{"ruleId":"solid/reactivity","severity":1,"message":"The reactive variable 'props.search.state' should be used within JSX, a tracked scope (like createEffect), or inside an event handler function, or else changes will be ignored.","line":47,"column":5,"nodeType":"MemberExpression","messageId":"untrackedReactive","endLine":47,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"solid/reactivity","severity":1,"message":"The reactive variable 'tempSearchValues' should be used within JSX, a tracked scope (like createEffect), or inside an event handler function, or else changes will be ignored.","line":52,"column":5,"nodeType":"CallExpression","messageId":"untrackedReactive","endLine":52,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"solid/reactivity","severity":1,"message":"The reactive variable 'tempSearchValues' should be used within JSX, a tracked scope (like createEffect), or inside an event handler function, or else changes will be ignored.","line":56,"column":5,"nodeType":"CallExpression","messageId":"untrackedReactive","endLine":56,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"solid/reactivity","severity":1,"message":"The reactive variable 'tempSearchValues' should be used within JSX, a tracked scope (like createEffect), or inside an event handler function, or else changes will be ignored.","line":60,"column":5,"nodeType":"CallExpression","messageId":"untrackedReactive","endLine":60,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"solid/reactivity","severity":1,"message":"The reactive variable 'tempSearchValues' should be used within JSX, a tracked scope (like createEffect), or inside an event handler function, or else changes will be ignored.","line":64,"column":5,"nodeType":"CallExpression","messageId":"untrackedReactive","endLine":64,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\nimport { BiRegularSearch, BiRegularX } from \"solid-icons/bi\";\nimport {\n  For,\n  Match,\n  Setter,\n  Show,\n  Switch,\n  createEffect,\n  createMemo,\n  createSignal,\n} from \"solid-js\";\nimport {\n  Menu,\n  MenuItem,\n  Popover,\n  PopoverButton,\n  PopoverPanel,\n} from \"solid-headless\";\nimport { FaRegularFlag, FaSolidCheck } from \"solid-icons/fa\";\nimport { Filter, FilterItem } from \"./FilterModal\";\nimport { FiChevronDown, FiChevronUp } from \"solid-icons/fi\";\nimport {\n  HighlightStrategy,\n  isSortByField,\n  isSortBySearchType,\n  SearchOptions,\n  SearchStore,\n} from \"../hooks/useSearch\";\nimport { Tooltip } from \"shared/ui\";\nimport { BsQuestionCircle } from \"solid-icons/bs\";\nimport { AiOutlinePlus } from \"solid-icons/ai\";\n\nconst defaultFilter = {\n  field: \"\",\n};\n\nconst SearchForm = (props: {\n  search: SearchStore;\n  groupID?: string;\n  openRateQueryModal: Setter<boolean>;\n}) => {\n  const bm25Active = import.meta.env.VITE_BM25_ACTIVE as unknown as string;\n  const [tempSearchValues, setTempSearchValues] = createSignal(\n    // eslint-disable-next-line solid/reactivity\n    props.search.state,\n  );\n  const [tempFilterType, setTempFilterType] = createSignal<string>(\"must\");\n  const [mustFilters, setMustFilters] = createSignal<Filter[]>(\n    // eslint-disable-next-line solid/reactivity\n    tempSearchValues().filters?.must ?? [],\n  );\n  const [mustNotFilters, setMustNotFilters] = createSignal<Filter[]>(\n    // eslint-disable-next-line solid/reactivity\n    tempSearchValues().filters?.must_not ?? [],\n  );\n  const [shouldFilters, setShouldFilters] = createSignal<Filter[]>(\n    // eslint-disable-next-line solid/reactivity\n    tempSearchValues().filters?.should ?? [],\n  );\n  const [jsonbPrefilter, setJsonbPrefilter] = createSignal<boolean>(\n    // eslint-disable-next-line solid/reactivity\n    tempSearchValues().filters?.jsonb_prefilter ?? true,\n  );\n  const [rerankQuery, setRerankQuery] = createSignal<string>(\"\");\n\n  const saveFilters = (setShowFilterModal: (filter: boolean) => void) => {\n    const filters = {\n      must: mustFilters(),\n      must_not: mustNotFilters(),\n      should: shouldFilters(),\n      jsonb_prefilter: jsonbPrefilter(),\n    };\n    props.search.setSearch(\"filters\", filters);\n    setShowFilterModal(false);\n  };\n\n  const default_settings = [\n    { name: \"Hybrid\", isSelected: false, route: \"hybrid\" },\n    {\n      name: \"FullText\",\n      isSelected: false,\n      route: \"fulltext\",\n    },\n    {\n      name: \"Semantic\",\n      isSelected: false,\n      route: \"semantic\",\n    },\n    {\n      name: \"AutoComplete Semantic\",\n      isSelected: false,\n      route: \"autocomplete-semantic\",\n    },\n    {\n      name: \"AutoComplete FullText\",\n      isSelected: false,\n      route: \"autocomplete-fulltext\",\n    },\n  ];\n\n  if (bm25Active) {\n    default_settings.push({\n      name: \"AutoComplete BM25\",\n      isSelected: false,\n      route: \"autocomplete-bm25\",\n    });\n    default_settings.push({ name: \"BM25\", isSelected: false, route: \"BM25\" });\n  }\n\n  const [searchTypes, setSearchTypes] = createSignal(default_settings);\n  const [sortTypes, setSortTypes] = createSignal([\n    {\n      name: \"Timestamp\",\n      isSelected: false,\n      value: \"time_stamp\",\n    },\n    {\n      name: \"Num Value\",\n      isSelected: false,\n      value: \"num_value\",\n    },\n  ]);\n\n  const defaultRerankTypes = [\n    {\n      name: \"Semantic\",\n      isSelected: false,\n      value: \"semantic\",\n    },\n    {\n      name: \"FullText\",\n      isSelected: false,\n      value: \"fulltext\",\n    },\n    {\n      name: \"Cross Encoder\",\n      isSelected: false,\n      value: \"cross_encoder\",\n    },\n  ];\n\n  if (bm25Active) {\n    defaultRerankTypes.push({\n      name: \"BM25\",\n      isSelected: false,\n      value: \"bm25\",\n    });\n  }\n  const [rerankTypes, setRerankTypes] = createSignal(defaultRerankTypes);\n\n  createEffect(() => {\n    setSearchTypes((prev) => {\n      return prev.map((type) => {\n        if (type.route === props.search.state.searchType) {\n          return { ...type, isSelected: true };\n        } else {\n          return { ...type, isSelected: false };\n        }\n      });\n    });\n  });\n\n  createEffect(() => {\n    setSortTypes((prev) => {\n      return prev.map((type) => {\n        if (isSortByField(props.search.state.sort_by)) {\n          if (type.value === props.search.state.sort_by.field) {\n            return { ...type, isSelected: true };\n          } else {\n            return { ...type, isSelected: false };\n          }\n        } else {\n          return { ...type, isSelected: false };\n        }\n      });\n    });\n  });\n\n  createEffect(() => {\n    setRerankTypes((prev) => {\n      return prev.map((type) => {\n        if (isSortBySearchType(props.search.state.sort_by)) {\n          if (type.value === props.search.state.sort_by.rerank_type) {\n            return { ...type, isSelected: true };\n          } else {\n            return { ...type, isSelected: false };\n          }\n        } else {\n          return { ...type, isSelected: false };\n        }\n      });\n    });\n    setRerankQuery(() => {\n      if (isSortBySearchType(props.search.state.sort_by)) {\n        return props.search.state.sort_by.rerank_query ?? \"\";\n      } else {\n        return \"\";\n      }\n    });\n  });\n\n  createEffect(() => {\n    props.search.setSearch(\n      \"searchType\",\n      searchTypes().find((type) => type.isSelected)?.route ?? \"hybrid\",\n    );\n  });\n\n  createEffect(() => {\n    props.search.setSearch(\"sort_by\", {\n      field: sortTypes().find((type) => type.isSelected)?.value,\n    });\n  });\n\n  createEffect(() => {\n    props.search.setSearch(\"sort_by\", {\n      rerank_type: rerankTypes().find((type) => type.isSelected)?.value,\n      rerank_query: rerankQuery() == \"\" ? undefined : rerankQuery(),\n    });\n  });\n\n  const filtersLength = createMemo(() => {\n    return (\n      mustFilters().length + mustNotFilters().length + shouldFilters().length\n    );\n  });\n\n  return (\n    <>\n      <div class=\"w-full\">\n        <form class=\"w-full space-y-4 dark:text-white\">\n          <div class=\"relative flex\">\n            <Show when={props.search.state.multiQueries.length == 0}>\n              <div\n                classList={{\n                  \"flex w-full justify-center space-x-2 rounded-md bg-neutral-100 px-4 py-1 pr-[10px] dark:bg-neutral-700\":\n                    true,\n                }}\n              >\n                <BiRegularSearch class=\"mt-1 h-6 w-6 fill-current\" />\n                <textarea\n                  id=\"search-query-textarea\"\n                  classList={{\n                    \"scrollbar-track-rounded-md scrollbar-thumb-rounded-md mr-2 h-fit max-h-[240px] w-full resize-none whitespace-pre-wrap bg-transparent py-1 scrollbar-thin scrollbar-track-neutral-200 scrollbar-thumb-neutral-400 focus:outline-none dark:bg-neutral-700 dark:text-white dark:scrollbar-track-neutral-700 dark:scrollbar-thumb-neutral-600 text-wrap\":\n                      true,\n                  }}\n                  value={props.search.state.query}\n                  onInput={(e) => {\n                    props.search.setSearch(\"query\", e.currentTarget.value);\n\n                    e.currentTarget.style.height = \"auto\";\n                    e.currentTarget.style.height =\n                      e.currentTarget.scrollHeight + \"px\";\n                  }}\n                  onKeyDown={(e) => {\n                    if (\n                      ((e.ctrlKey || e.metaKey) && e.key === \"Enter\") ||\n                      (!e.shiftKey && e.key === \"Enter\")\n                    ) {\n                      props.search.setSearch(\"version\", (prev) => prev + 1);\n                      e.preventDefault();\n                      e.stopPropagation();\n                    }\n                  }}\n                  placeholder=\"Search for chunks...\"\n                  rows={props.search.state.query.split(\"\\n\").length}\n                />\n                <button\n                  classList={{\n                    \"pt-[2px]\": !!props.search.state.query,\n                  }}\n                  onClick={(e) => {\n                    e.preventDefault();\n                    props.search.setSearch(\"query\", \"\");\n                  }}\n                >\n                  <BiRegularX class=\"h-7 w-7 fill-current\" />\n                </button>\n                <button\n                  classList={{\n                    \"border-l border-neutral-600 pl-[10px] dark:border-neutral-200\":\n                      !!props.search.state.query,\n                  }}\n                  type=\"submit\"\n                >\n                  <BiRegularSearch class=\"mt-1 h-6 w-6 fill-current\" />\n                </button>\n              </div>\n            </Show>\n            <Show when={props.search.state.multiQueries.length > 0}>\n              <div class=\"flex w-full flex-col space-y-2\">\n                <For each={props.search.state.multiQueries}>\n                  {(multiQuery, index) => (\n                    <div\n                      classList={{\n                        \"flex w-full justify-center space-x-2 rounded-md bg-neutral-100 px-4 py-1 pr-[10px] dark:bg-neutral-700\":\n                          true,\n                      }}\n                    >\n                      <BiRegularSearch class=\"mt-1 h-6 w-6 fill-current\" />\n                      <textarea\n                        id={`search-query-textarea-${index()}`}\n                        classList={{\n                          \"scrollbar-track-rounded-md scrollbar-thumb-rounded-md mr-2 h-fit max-h-[240px] w-full resize-none whitespace-pre-wrap bg-transparent py-1 scrollbar-thin scrollbar-track-neutral-200 scrollbar-thumb-neutral-400 focus:outline-none dark:bg-neutral-700 dark:text-white dark:scrollbar-track-neutral-700 dark:scrollbar-thumb-neutral-600 text-wrap\":\n                            true,\n                        }}\n                        value={multiQuery.query}\n                        onInput={(e) => {\n                          props.search.setSearch(\n                            \"multiQueries\",\n                            props.search.state.multiQueries.map((query) => {\n                              if (query === multiQuery) {\n                                return {\n                                  ...query,\n                                  query: e.currentTarget.value,\n                                };\n                              } else {\n                                return query;\n                              }\n                            }),\n                          );\n\n                          const searchTextarea = document.getElementById(\n                            `search-query-textarea-${index()}`,\n                          );\n\n                          searchTextarea?.focus();\n                          setTimeout(() => {\n                            searchTextarea?.focus();\n                          }, 50);\n                          setTimeout(() => {\n                            searchTextarea?.focus();\n                          }, 100);\n                          setTimeout(() => {\n                            searchTextarea?.focus();\n                          }, 200);\n                          setTimeout(() => {\n                            searchTextarea?.focus();\n                          }, 300);\n                          setTimeout(() => {\n                            searchTextarea?.focus();\n                          }, 400);\n                          setTimeout(() => {\n                            searchTextarea?.focus();\n                          }, 500);\n                          e.currentTarget.style.height = \"auto\";\n                          e.currentTarget.style.height =\n                            e.currentTarget.scrollHeight + \"px\";\n                        }}\n                        onKeyDown={(e) => {\n                          if (\n                            ((e.ctrlKey || e.metaKey) && e.key === \"Enter\") ||\n                            (!e.shiftKey && e.key === \"Enter\")\n                          ) {\n                            props.search.setSearch(\n                              \"version\",\n                              (prev) => prev + 1,\n                            );\n                            e.preventDefault();\n                            e.stopPropagation();\n                          }\n                        }}\n                        placeholder=\"Search for chunks...\"\n                        rows={props.search.state.query.split(\"\\n\").length}\n                      />\n                      <input\n                        id={`search-query-weight-${index()}`}\n                        type=\"number\"\n                        inputmode=\"decimal\"\n                        step=\"0.1\"\n                        min=\"0\"\n                        classList={{\n                          \"scrollbar-track-rounded-md scrollbar-thumb-rounded-md h-fit max-h-[240px] max-w-[10vw] resize-none whitespace-pre-wrap bg-transparent py-1 scrollbar-thin scrollbar-track-neutral-200 scrollbar-thumb-neutral-400 focus:outline-none dark:bg-neutral-700 dark:text-white dark:scrollbar-track-neutral-700 dark:scrollbar-thumb-neutral-600 text-wrap border-l border-neutral-600 pl-2\":\n                            true,\n                        }}\n                        value={multiQuery.weight}\n                        onChange={(e) => {\n                          props.search.setSearch(\n                            \"multiQueries\",\n                            props.search.state.multiQueries.map((query) => {\n                              if (query === multiQuery) {\n                                return {\n                                  ...query,\n                                  weight: parseFloat(e.currentTarget.value),\n                                };\n                              } else {\n                                return query;\n                              }\n                            }),\n                          );\n\n                          const searchTextarea = document.getElementById(\n                            `search-query-weight-${index()}`,\n                          );\n\n                          searchTextarea?.focus();\n                          setTimeout(() => {\n                            searchTextarea?.focus();\n                          }, 50);\n                          setTimeout(() => {\n                            searchTextarea?.focus();\n                          }, 100);\n                          setTimeout(() => {\n                            searchTextarea?.focus();\n                          }, 200);\n                          setTimeout(() => {\n                            searchTextarea?.focus();\n                          }, 300);\n                          setTimeout(() => {\n                            searchTextarea?.focus();\n                          }, 400);\n                          setTimeout(() => {\n                            searchTextarea?.focus();\n                          }, 500);\n                          e.currentTarget.style.height = \"auto\";\n                          e.currentTarget.style.height =\n                            e.currentTarget.scrollHeight + \"px\";\n                        }}\n                        onKeyDown={(e) => {\n                          if (\n                            ((e.ctrlKey || e.metaKey) && e.key === \"Enter\") ||\n                            (!e.shiftKey && e.key === \"Enter\")\n                          ) {\n                            props.search.setSearch(\n                              \"version\",\n                              (prev) => prev + 1,\n                            );\n                            e.preventDefault();\n                            e.stopPropagation();\n                          }\n                        }}\n                        placeholder=\"Add weight...\"\n                      />\n                      <button\n                        classList={{\n                          \"pt-[2px]\": true,\n                        }}\n                        onClick={(e) => {\n                          e.preventDefault();\n                          props.search.setSearch(\n                            \"multiQueries\",\n                            props.search.state.multiQueries.filter(\n                              (query) => query !== multiQuery,\n                            ),\n                          );\n                        }}\n                      >\n                        <BiRegularX class=\"h-7 w-7 fill-current\" />\n                      </button>\n                    </div>\n                  )}\n                </For>\n              </div>\n            </Show>\n          </div>\n          <Show when={props.search.state.multiQueries.length > 0}>\n            <div class=\"flex items-center justify-self-end\">\n              <div class=\"flex-1\" />\n              <button\n                class=\"flex w-fit items-center rounded bg-neutral-100 p-1 text-sm hover:bg-neutral-100 dark:bg-neutral-700 dark:hover:bg-neutral-800\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  props.search.setSearch(\"multiQueries\", [\n                    ...props.search.state.multiQueries,\n                    {\n                      query: \"\",\n                      weight: 1,\n                    },\n                  ]);\n                }}\n              >\n                <AiOutlinePlus class=\"mr-2\" />\n                <span>Add Query</span>\n              </button>\n            </div>\n          </Show>\n          <div class=\"flex flex-wrap space-x-3\">\n            <Popover\n              defaultOpen={false}\n              class=\"relative\"\n              onClose={() => {\n                saveFilters(() => {});\n              }}\n            >\n              {({ isOpen, setState }) => (\n                <>\n                  <PopoverButton\n                    aria-label=\"Toggle filters\"\n                    type=\"button\"\n                    class=\"flex items-center space-x-1 pb-1 text-sm\"\n                  >\n                    <Tooltip\n                      direction=\"right\"\n                      body={\n                        <div\n                          classList={{\n                            \"rounded-full w-3 h-3 text-[8px] text-center leading-[10px]\":\n                              true,\n                            \"bg-fuchsia-500 text-white\": filtersLength() > 0,\n                            \"bg-neutral-100 text-neutral-500\":\n                              filtersLength() === 0,\n                          }}\n                        >\n                          {filtersLength()}\n                        </div>\n                      }\n                      tooltipText={`${filtersLength()} filter(s) applied`}\n                    />\n                    <span>Filters</span>\n                    <Switch>\n                      <Match when={isOpen()}>\n                        <FiChevronUp class=\"h-3.5 w-3.5\" />\n                      </Match>\n                      <Match when={!isOpen()}>\n                        <FiChevronDown class=\"h-3.5 w-3.5\" />\n                      </Match>\n                    </Switch>\n                  </PopoverButton>\n                  <Show when={isOpen()}>\n                    <PopoverPanel\n                      tabIndex={0}\n                      unmount={false}\n                      class=\"absolute z-10 mt-2 h-fit w-fit rounded-md bg-neutral-200 p-1 shadow-lg dark:bg-neutral-700\"\n                    >\n                      <div class=\"flex max-h-[50vh] min-w-[70vw] max-w-[75vw] flex-col space-y-2 overflow-auto px-2 pr-2 scrollbar-thin scrollbar-track-neutral-200 scrollbar-thumb-neutral-400 scrollbar-thumb-rounded-md dark:text-white dark:scrollbar-track-neutral-800 dark:scrollbar-thumb-neutral-600 xl:min-w-[50vw] 2xl:min-w-[40vw]\">\n                        <div class=\"flex w-full items-center space-x-2 border-b border-neutral-400 py-2 dark:border-neutral-900\">\n                          <label aria-label=\"Change Filter Type\">\n                            <span class=\"p-1\">Filter Type:</span>\n                          </label>\n                          <select\n                            class=\"h-fit rounded-md border border-neutral-400 bg-neutral-100 p-1 dark:border-neutral-900 dark:bg-neutral-800\"\n                            onChange={(e) => {\n                              setTempFilterType(e.currentTarget.value);\n                            }}\n                            value={tempFilterType()}\n                          >\n                            <For each={[\"must\", \"must not\", \"should\"]}>\n                              {(filter_type) => {\n                                return (\n                                  <option\n                                    classList={{\n                                      \"flex w-full items-center justify-between rounded p-1\":\n                                        true,\n                                      \"bg-neutral-300 dark:bg-neutral-900\":\n                                        filter_type === tempFilterType(),\n                                    }}\n                                  >\n                                    {filter_type}\n                                  </option>\n                                );\n                              }}\n                            </For>\n                          </select>\n                          <button\n                            type=\"button\"\n                            class=\"rounded-md border border-neutral-400 bg-neutral-100 p-1 dark:border-neutral-900 dark:bg-neutral-800\"\n                            onClick={() => {\n                              const curFilterType = tempFilterType();\n                              if (curFilterType === \"must\") {\n                                setMustFilters([\n                                  ...mustFilters(),\n                                  defaultFilter,\n                                ]);\n                              }\n                              if (curFilterType === \"must not\") {\n                                setMustNotFilters([\n                                  ...mustNotFilters(),\n                                  defaultFilter,\n                                ]);\n                              }\n                              if (curFilterType === \"should\") {\n                                setShouldFilters([\n                                  ...shouldFilters(),\n                                  defaultFilter,\n                                ]);\n                              }\n                            }}\n                          >\n                            + Add Filter\n                          </button>\n                          <div class=\"flex-1\" />\n                          <label\n                            aria-label=\"Change JSONB Prefilter\"\n                            class=\"flex items-center gap-x-1\"\n                          >\n                            <Tooltip\n                              body={\n                                <BsQuestionCircle class=\"h-4 w-4 rounded-full fill-current\" />\n                              }\n                              tooltipText=\"Only uncheck if on the enterprise plan and you wish to use custom indices for metadata filters.\"\n                            />\n                            <span>JSONB Prefilter:</span>\n                          </label>\n                          <input\n                            type=\"checkbox\"\n                            class=\"rounded-md border border-neutral-400 bg-neutral-100 dark:border-neutral-900 dark:bg-neutral-800\"\n                            onChange={(e) => {\n                              setJsonbPrefilter(e.currentTarget.checked);\n                            }}\n                            checked={jsonbPrefilter()}\n                          />\n                          <button\n                            type=\"button\"\n                            class=\"rounded-md border border-neutral-400 bg-neutral-100 p-1 dark:border-neutral-900 dark:bg-neutral-800\"\n                            onClick={() => {\n                              setMustFilters([]);\n                              setMustNotFilters([]);\n                              setShouldFilters([]);\n                            }}\n                          >\n                            Reset Filters\n                          </button>\n                          <button\n                            type=\"button\"\n                            class=\"rounded-md border border-neutral-400 bg-neutral-100 p-1 dark:border-neutral-900 dark:bg-neutral-800\"\n                            onClick={() => saveFilters(setState)}\n                          >\n                            Apply Filters\n                          </button>\n                        </div>\n                        <Show when={mustFilters().length > 0}>\n                          <div class=\"border-b border-neutral-400 py-2 dark:border-neutral-900\">\n                            must: [\n                            <div class=\"flex flex-col gap-y-2\">\n                              <For each={mustFilters()}>\n                                {(filter, index) => {\n                                  const onFilterChange = (\n                                    newFilter: Filter,\n                                  ) => {\n                                    const newFilters = mustFilters();\n                                    newFilters[index()] = newFilter;\n                                    setMustFilters(newFilters);\n                                  };\n\n                                  return (\n                                    <div\n                                      classList={{\n                                        \"border-b border-dotted border-neutral-400 dark:border-neutral-900\":\n                                          index() < mustFilters().length - 1,\n                                      }}\n                                    >\n                                      <FilterItem\n                                        initialFilter={filter}\n                                        onFilterChange={onFilterChange}\n                                      />\n                                    </div>\n                                  );\n                                }}\n                              </For>\n                            </div>\n                            ]\n                          </div>\n                        </Show>\n                        <Show when={mustNotFilters().length > 0}>\n                          <div class=\"border-b border-neutral-400 py-2 dark:border-neutral-900\">\n                            must not: [\n                            <div class=\"flex flex-col gap-y-2\">\n                              <For each={mustNotFilters()}>\n                                {(filter, index) => {\n                                  const onFilterChange = (\n                                    newFilter: Filter,\n                                  ) => {\n                                    const newFilters = mustNotFilters();\n                                    newFilters[index()] = newFilter;\n                                    setMustNotFilters(newFilters);\n                                  };\n\n                                  return (\n                                    <div\n                                      classList={{\n                                        \"border-b border-dotted border-neutral-400 dark:border-neutral-900\":\n                                          index() < mustNotFilters().length - 1,\n                                      }}\n                                    >\n                                      <FilterItem\n                                        initialFilter={filter}\n                                        onFilterChange={onFilterChange}\n                                      />\n                                    </div>\n                                  );\n                                }}\n                              </For>\n                            </div>\n                            ]\n                          </div>\n                        </Show>\n                        <Show when={shouldFilters().length > 0}>\n                          <div class=\"border-b border-neutral-400 py-2 dark:border-neutral-900\">\n                            should: [\n                            <div class=\"flex flex-col gap-y-2\">\n                              <For each={shouldFilters()}>\n                                {(filter, index) => {\n                                  const onFilterChange = (\n                                    newFilter: Filter,\n                                  ) => {\n                                    const newFilters = shouldFilters();\n                                    newFilters[index()] = newFilter;\n                                    setShouldFilters(newFilters);\n                                  };\n\n                                  return (\n                                    <div\n                                      classList={{\n                                        \"border-b border-dotted border-neutral-400 dark:border-neutral-900\":\n                                          index() < shouldFilters().length - 1,\n                                      }}\n                                    >\n                                      <FilterItem\n                                        initialFilter={filter}\n                                        onFilterChange={onFilterChange}\n                                      />\n                                    </div>\n                                  );\n                                }}\n                              </For>\n                            </div>\n                            ]\n                          </div>\n                        </Show>\n                      </div>\n                    </PopoverPanel>\n                  </Show>\n                </>\n              )}\n            </Popover>\n            <Popover defaultOpen={false} class=\"relative\">\n              {({ isOpen, setState }) => (\n                <>\n                  <PopoverButton\n                    aria-label=\"Toggle filters\"\n                    type=\"button\"\n                    class=\"flex items-center space-x-1 pb-1 text-sm\"\n                  >\n                    <span>\n                      Type:{\" \"}\n                      {searchTypes().find((type) => type.isSelected)?.name ??\n                        \"Hybrid\"}\n                    </span>\n                    <Switch>\n                      <Match when={isOpen()}>\n                        <FiChevronUp class=\"h-3.5 w-3.5\" />\n                      </Match>\n                      <Match when={!isOpen()}>\n                        <FiChevronDown class=\"h-3.5 w-3.5\" />\n                      </Match>\n                    </Switch>\n                  </PopoverButton>\n                  <Show when={isOpen()}>\n                    <PopoverPanel\n                      unmount={false}\n                      class=\"absolute z-10 mt-2 h-fit w-[180px] rounded-md bg-neutral-200 p-1 shadow-lg dark:bg-neutral-800\"\n                    >\n                      <Menu class=\"ml-1 space-y-1\">\n                        <For each={searchTypes()}>\n                          {(option) => {\n                            if (props.groupID && option.route === \"hybrid\") {\n                              return <></>;\n                            }\n\n                            const onClick = (e: Event) => {\n                              e.preventDefault();\n                              e.stopPropagation();\n                              setSearchTypes((prev) => {\n                                return prev.map((item) => {\n                                  if (item.name === option.name) {\n                                    return { ...item, isSelected: true };\n                                  } else {\n                                    return { ...item, isSelected: false };\n                                  }\n                                });\n                              });\n                              setState(true);\n                            };\n                            return (\n                              <MenuItem\n                                as=\"button\"\n                                classList={{\n                                  \"flex w-full items-center justify-between rounded p-1 focus:text-black focus:outline-none dark:hover:text-white dark:focus:text-white\":\n                                    true,\n                                  \"bg-neutral-300 dark:bg-neutral-900\":\n                                    option.isSelected ||\n                                    (option.route == \"hybrid\" &&\n                                      searchTypes().find(\n                                        (type) => type.isSelected,\n                                      )?.name == undefined),\n                                }}\n                                onClick={onClick}\n                              >\n                                <div class=\"flex flex-row justify-start space-x-2\">\n                                  <span class=\"text-left\">{option.name}</span>\n                                </div>\n                                {(option.isSelected ||\n                                  (option.route == \"hybrid\" &&\n                                    searchTypes().find(\n                                      (type) => type.isSelected,\n                                    )?.name == undefined)) && (\n                                  <span>\n                                    <FaSolidCheck class=\"fill-current text-xl\" />\n                                  </span>\n                                )}\n                              </MenuItem>\n                            );\n                          }}\n                        </For>\n                      </Menu>\n                    </PopoverPanel>\n                  </Show>\n                </>\n              )}\n            </Popover>\n            <Popover defaultOpen={false} class=\"relative\">\n              {({ isOpen, setState }) => (\n                <>\n                  <PopoverButton\n                    aria-label=\"Toggle filters\"\n                    type=\"button\"\n                    class=\"flex items-center space-x-1 pb-1 text-sm\"\n                  >\n                    <span>Sort</span>\n                    <Switch>\n                      <Match when={isOpen()}>\n                        <FiChevronUp class=\"h-3.5 w-3.5\" />\n                      </Match>\n                      <Match when={!isOpen()}>\n                        <FiChevronDown class=\"h-3.5 w-3.5\" />\n                      </Match>\n                    </Switch>\n                  </PopoverButton>\n                  <Show when={isOpen()}>\n                    <PopoverPanel\n                      unmount={false}\n                      class=\"absolute z-10 mt-2 h-fit w-[180px] rounded-md bg-neutral-200 p-1 shadow-lg dark:bg-neutral-800\"\n                    >\n                      <Menu class=\"ml-1 space-y-1\">\n                        <For each={sortTypes()}>\n                          {(option) => {\n                            const onClick = (e: Event) => {\n                              e.preventDefault();\n                              e.stopPropagation();\n                              setSortTypes((prev) => {\n                                return prev.map((item) => {\n                                  if (item.name === option.name) {\n                                    return {\n                                      ...item,\n                                      isSelected: !item.isSelected,\n                                    };\n                                  } else {\n                                    return {\n                                      ...item,\n                                      isSelected: false,\n                                    };\n                                  }\n                                });\n                              });\n                              setState(true);\n                            };\n                            return (\n                              <MenuItem\n                                as=\"button\"\n                                classList={{\n                                  \"flex w-full items-center justify-between rounded p-1 focus:text-black focus:outline-none dark:hover:text-white dark:focus:text-white\":\n                                    true,\n                                  \"bg-neutral-300 dark:bg-neutral-900\":\n                                    option.isSelected,\n                                }}\n                                onClick={onClick}\n                              >\n                                <div class=\"flex flex-row justify-start space-x-2\">\n                                  <span class=\"text-left\">{option.name}</span>\n                                </div>\n                                {option.isSelected && (\n                                  <span>\n                                    <FaSolidCheck class=\"fill-current text-xl\" />\n                                  </span>\n                                )}\n                              </MenuItem>\n                            );\n                          }}\n                        </For>\n                      </Menu>\n                    </PopoverPanel>\n                  </Show>\n                </>\n              )}\n            </Popover>\n            <Popover defaultOpen={false} class=\"relative\">\n              {({ isOpen, setState }) => (\n                <>\n                  <PopoverButton\n                    aria-label=\"Toggle filters\"\n                    type=\"button\"\n                    class=\"flex items-center space-x-1 pb-1 text-sm\"\n                  >\n                    <span>Rerank By</span>\n                    <Switch>\n                      <Match when={isOpen()}>\n                        <FiChevronUp class=\"h-3.5 w-3.5\" />\n                      </Match>\n                      <Match when={!isOpen()}>\n                        <FiChevronDown class=\"h-3.5 w-3.5\" />\n                      </Match>\n                    </Switch>\n                  </PopoverButton>\n                  <Show when={isOpen()}>\n                    <PopoverPanel\n                      unmount={false}\n                      class=\"absolute z-10 mt-2 h-fit w-[180px] rounded-md bg-neutral-200 p-1 shadow-lg dark:bg-neutral-800\"\n                    >\n                      <Menu class=\"ml-1 space-y-1\">\n                        <input\n                          type=\"text\"\n                          class=\"max-w-[165px] rounded-md border border-neutral-400 bg-neutral-100 p-1 dark:border-neutral-900 dark:bg-neutral-800\"\n                          placeholder=\"Rerank Query\"\n                          onChange={(e) => {\n                            setRerankQuery(e.currentTarget.value);\n                          }}\n                          value={rerankQuery()}\n                        />\n                        <For each={rerankTypes()}>\n                          {(option) => {\n                            const onClick = (e: Event) => {\n                              e.preventDefault();\n                              e.stopPropagation();\n                              setRerankTypes((prev) => {\n                                return prev.map((item) => {\n                                  if (item.name === option.name) {\n                                    return {\n                                      ...item,\n                                      isSelected: !item.isSelected,\n                                    };\n                                  } else {\n                                    return {\n                                      ...item,\n                                      isSelected: false,\n                                    };\n                                  }\n                                });\n                              });\n                              setState(true);\n                            };\n                            return (\n                              <MenuItem\n                                as=\"button\"\n                                classList={{\n                                  \"flex w-full items-center justify-between rounded p-1 focus:text-black focus:outline-none dark:hover:text-white dark:focus:text-white\":\n                                    true,\n                                  \"bg-neutral-300 dark:bg-neutral-900\":\n                                    option.isSelected,\n                                }}\n                                onClick={onClick}\n                              >\n                                <div class=\"flex flex-row justify-start space-x-2\">\n                                  <span class=\"text-left\">{option.name}</span>\n                                </div>\n                                {option.isSelected && (\n                                  <span>\n                                    <FaSolidCheck class=\"fill-current text-xl\" />\n                                  </span>\n                                )}\n                              </MenuItem>\n                            );\n                          }}\n                        </For>\n                      </Menu>\n                    </PopoverPanel>\n                  </Show>\n                </>\n              )}\n            </Popover>\n            <Popover\n              defaultOpen={false}\n              class=\"relative\"\n              onClose={() => {\n                const newSearchValues = tempSearchValues();\n                newSearchValues.version += 1;\n                newSearchValues.sort_by = props.search.state.sort_by;\n                newSearchValues.searchType = props.search.state.searchType;\n                newSearchValues.groupUniqueSearch =\n                  props.search.state.groupUniqueSearch;\n                newSearchValues.query = props.search.state.query;\n\n                props.search.setSearch(newSearchValues);\n\n                const searchTextarea = document.getElementById(\n                  \"search-query-textarea\",\n                );\n\n                searchTextarea?.focus();\n                setTimeout(() => {\n                  searchTextarea?.focus();\n                }, 50);\n                setTimeout(() => {\n                  searchTextarea?.focus();\n                }, 100);\n                setTimeout(() => {\n                  searchTextarea?.focus();\n                }, 200);\n                setTimeout(() => {\n                  searchTextarea?.focus();\n                }, 300);\n                setTimeout(() => {\n                  searchTextarea?.focus();\n                }, 400);\n                setTimeout(() => {\n                  searchTextarea?.focus();\n                }, 500);\n              }}\n            >\n              {({ isOpen }) => (\n                <>\n                  <PopoverButton\n                    aria-label=\"Toggle options\"\n                    type=\"button\"\n                    class=\"flex items-center space-x-1 pb-1 text-sm\"\n                  >\n                    <span>Options</span>\n                    <Switch>\n                      <Match when={isOpen()}>\n                        <FiChevronUp class=\"h-3.5 w-3.5\" />\n                      </Match>\n                      <Match when={!isOpen()}>\n                        <FiChevronDown class=\"h-3.5 w-3.5\" />\n                      </Match>\n                    </Switch>\n                  </PopoverButton>\n                  <Show when={isOpen()}>\n                    <PopoverPanel\n                      unmount={false}\n                      tabIndex={0}\n                      class=\"absolute z-10 mt-2 h-fit w-[80vw] rounded-md bg-neutral-200 p-1 shadow-lg dark:bg-neutral-700 sm:w-[300px] md:w-[400px]\"\n                    >\n                      <div class=\"items flex flex-col space-y-1\">\n                        <div class=\"mt-1\">\n                          <button\n                            class=\"rounded-md border border-neutral-400 bg-neutral-100 px-2 py-1 dark:border-neutral-900 dark:bg-neutral-800\"\n                            onClick={(e) => {\n                              e.preventDefault();\n                              setTempSearchValues((prev) => {\n                                return {\n                                  ...props.search.state,\n                                  ...prev,\n                                  scoreThreshold: 0.0,\n                                  extendResults: false,\n                                  slimChunks: false,\n                                  sort_by: {\n                                    field: \"\",\n                                  },\n                                  pageSize: 10,\n                                  getTotalPages: false,\n                                  highlightStrategy: \"exactmatch\",\n                                  highlightResults: true,\n                                  highlightDelimiters: [\"?\", \".\", \"!\"],\n                                  highlightMaxLength: 8,\n                                  highlightMaxNum: 3,\n                                  highlightWindow: 0,\n                                  group_size: 3,\n                                  removeStopWords: false,\n                                } as SearchOptions;\n                              });\n                            }}\n                          >\n                            Reset\n                          </button>\n                        </div>\n                        <div class=\"flex items-center justify-between space-x-2 p-1\">\n                          <label>Score Threshold (0.0 to 1.0):</label>\n                          <input\n                            class=\"w-16 rounded border border-neutral-400 p-0.5 text-black\"\n                            type=\"number\"\n                            step=\"any\"\n                            value={tempSearchValues().scoreThreshold}\n                            onChange={(e) => {\n                              setTempSearchValues((prev) => {\n                                return {\n                                  ...prev,\n                                  scoreThreshold: parseFloat(\n                                    e.currentTarget.value,\n                                  ),\n                                };\n                              });\n                            }}\n                          />\n                        </div>\n                        <div class=\"flex items-center justify-between space-x-2 p-1\">\n                          <label>Highlight exact match</label>\n                          <select\n                            class=\"h-fit rounded-md border border-neutral-400 bg-neutral-100 p-1 dark:border-neutral-900 dark:bg-neutral-800\"\n                            onChange={(s) => {\n                              setTempSearchValues((prev) => {\n                                return {\n                                  ...prev,\n                                  highlightStrategy: s.target\n                                    .value as HighlightStrategy,\n                                };\n                              });\n                            }}\n                            value={tempSearchValues().highlightStrategy}\n                          >\n                            <option value=\"v1\">V1</option>\n                            <option value=\"exactmatch\">Exact match</option>\n                          </select>\n                        </div>\n                        <Show\n                          when={\n                            searchTypes().find((type) => type.isSelected)\n                              ?.route === \"autocomplete-semantic\" ||\n                            searchTypes().find((type) => type.isSelected)\n                              ?.route === \"autocomplete-fulltext\" ||\n                            searchTypes().find((type) => type.isSelected)\n                              ?.route === \"autocomplete-bm25\"\n                          }\n                        >\n                          <div class=\"flex items-center justify-between space-x-2 p-1\">\n                            <label>Extend Results (autocomplete only):</label>\n                            <input\n                              class=\"h-4 w-4\"\n                              type=\"checkbox\"\n                              checked={tempSearchValues().extendResults}\n                              onChange={(e) => {\n                                setTempSearchValues((prev) => {\n                                  return {\n                                    ...prev,\n                                    extendResults: e.target.checked,\n                                  };\n                                });\n                              }}\n                            />\n                          </div>\n                        </Show>\n                        <div class=\"flex items-center justify-between space-x-2 p-1\">\n                          <label>Slim Chunks (Latency Improvement):</label>\n                          <input\n                            class=\"h-4 w-4\"\n                            type=\"checkbox\"\n                            checked={tempSearchValues().slimChunks}\n                            onChange={(e) => {\n                              setTempSearchValues((prev) => {\n                                return {\n                                  ...prev,\n                                  slimChunks: e.target.checked,\n                                };\n                              });\n                            }}\n                          />\n                        </div>\n                        <div class=\"flex items-center justify-between space-x-2 p-1\">\n                          <label>Page Size:</label>\n                          <input\n                            class=\"w-16 rounded border border-neutral-400 p-0.5 text-black\"\n                            type=\"number\"\n                            value={tempSearchValues().pageSize}\n                            onChange={(e) => {\n                              setTempSearchValues((prev) => {\n                                return {\n                                  ...prev,\n                                  pageSize: parseInt(e.currentTarget.value),\n                                };\n                              });\n                            }}\n                          />\n                        </div>\n                        <div class=\"flex items-center justify-between space-x-2 p-1\">\n                          <label>Use Quote Negated Words</label>\n                          <input\n                            class=\"h-4 w-4\"\n                            type=\"checkbox\"\n                            checked={tempSearchValues().useQuoteNegatedTerms}\n                            onChange={(e) => {\n                              setTempSearchValues((prev) => {\n                                return {\n                                  ...prev,\n                                  useQuoteNegatedTerms: e.target.checked,\n                                };\n                              });\n                            }}\n                          />\n                        </div>\n                        <div class=\"flex items-center justify-between space-x-2 p-1\">\n                          <label>Get Total Pages (Latency Penalty):</label>\n                          <input\n                            class=\"h-4 w-4\"\n                            type=\"checkbox\"\n                            checked={tempSearchValues().getTotalPages}\n                            onChange={(e) => {\n                              setTempSearchValues((prev) => {\n                                return {\n                                  ...prev,\n                                  getTotalPages: e.target.checked,\n                                };\n                              });\n                            }}\n                          />\n                        </div>\n                        <div class=\"flex items-center justify-between space-x-2 p-1\">\n                          <label>Remove Stop Words</label>\n                          <input\n                            class=\"h-4 w-4\"\n                            type=\"checkbox\"\n                            checked={tempSearchValues().removeStopWords}\n                            onChange={(e) => {\n                              setTempSearchValues((prev) => {\n                                return {\n                                  ...prev,\n                                  removeStopWords: e.target.checked,\n                                };\n                              });\n                            }}\n                          />\n                        </div>\n                        <div class=\"flex items-center justify-between space-x-2 p-1\">\n                          <label>Highlight Results (Latency Penalty):</label>\n                          <input\n                            class=\"h-4 w-4\"\n                            type=\"checkbox\"\n                            checked={tempSearchValues().highlightResults}\n                            onChange={(e) => {\n                              setTempSearchValues((prev) => {\n                                return {\n                                  ...prev,\n                                  highlightResults: e.target.checked,\n                                };\n                              });\n                            }}\n                          />\n                        </div>\n                        <div class=\"items flex justify-between space-x-2 p-1\">\n                          <label>Highlight Threshold:</label>\n                          <input\n                            class=\"w-16 rounded border border-neutral-400 p-0.5 text-black\"\n                            type=\"number\"\n                            step=\"any\"\n                            value={tempSearchValues().highlightThreshold}\n                            onChange={(e) => {\n                              setTempSearchValues((prev) => {\n                                return {\n                                  ...prev,\n                                  highlightThreshold: parseFloat(\n                                    e.currentTarget.value,\n                                  ),\n                                };\n                              });\n                            }}\n                          />\n                        </div>\n                        <div class=\"items flex justify-between space-x-2 p-1\">\n                          <label>Highlight Delimiters (Comma Separated):</label>\n                          <input\n                            class=\"w-16 rounded border border-neutral-400 p-0.5 text-black\"\n                            type=\"text\"\n                            value={tempSearchValues().highlightDelimiters.join(\n                              \",\",\n                            )}\n                            onInput={(e) => {\n                              if (e.currentTarget.value === \" \") {\n                                setTempSearchValues((prev) => {\n                                  return {\n                                    ...prev,\n                                    highlightDelimiters: [\" \"],\n                                  };\n                                });\n                              }\n\n                              setTempSearchValues((prev) => {\n                                return {\n                                  ...prev,\n                                  highlightDelimiters:\n                                    e.currentTarget.value.split(\",\"),\n                                };\n                              });\n                            }}\n                          />\n                        </div>\n                        <div class=\"items flex justify-between space-x-2 p-1\">\n                          <label>Highlight Max Length:</label>\n                          <input\n                            class=\"w-16 rounded border border-neutral-400 p-0.5 text-black\"\n                            type=\"number\"\n                            value={tempSearchValues().highlightMaxLength}\n                            onChange={(e) => {\n                              setTempSearchValues((prev) => {\n                                return {\n                                  ...prev,\n                                  highlightMaxLength: parseInt(\n                                    e.currentTarget.value,\n                                  ),\n                                };\n                              });\n                            }}\n                          />\n                        </div>\n                        <div class=\"items flex justify-between space-x-2 p-1\">\n                          <label>Highlight Max Num:</label>\n                          <input\n                            class=\"w-16 rounded border border-neutral-400 p-0.5 text-black\"\n                            type=\"number\"\n                            value={tempSearchValues().highlightMaxNum}\n                            onChange={(e) => {\n                              setTempSearchValues((prev) => {\n                                return {\n                                  ...prev,\n                                  highlightMaxNum: parseInt(\n                                    e.currentTarget.value,\n                                  ),\n                                };\n                              });\n                            }}\n                          />\n                        </div>\n                        <div class=\"items flex justify-between space-x-2 p-1\">\n                          <label>Highlight Window:</label>\n                          <input\n                            class=\"w-16 rounded border border-neutral-400 p-0.5 text-black\"\n                            type=\"number\"\n                            value={tempSearchValues().highlightWindow}\n                            onChange={(e) => {\n                              setTempSearchValues((prev) => {\n                                return {\n                                  ...prev,\n                                  highlightWindow: parseInt(\n                                    e.currentTarget.value,\n                                  ),\n                                };\n                              });\n                            }}\n                          />\n                        </div>\n                        <Show when={props.search.state.groupUniqueSearch}>\n                          <div class=\"items flex justify-between space-x-2 p-1\">\n                            <label>Group size:</label>\n                            <input\n                              class=\"w-16 rounded border border-neutral-400 p-0.5 text-black\"\n                              type=\"number\"\n                              value={tempSearchValues().group_size}\n                              onChange={(e) => {\n                                setTempSearchValues((prev) => {\n                                  return {\n                                    ...prev,\n                                    group_size: parseInt(e.currentTarget.value),\n                                  };\n                                });\n                              }}\n                            />\n                          </div>\n                        </Show>\n                      </div>\n                    </PopoverPanel>\n                  </Show>\n                </>\n              )}\n            </Popover>\n            <div class=\"flex items-center space-x-1 pb-3 text-sm\">\n              <Tooltip\n                body={\n                  <BsQuestionCircle class=\"h-3.5 w-3.5 rounded-full fill-current\" />\n                }\n                tooltipText=\"Use multiple queries with different weights to search for chunks. Only works with Semantic Search and is not compatible with cross encoder re-ranking or highlights.\"\n              />\n              <span>Multi Query</span>\n              <input\n                class=\"h-4 w-4\"\n                type=\"checkbox\"\n                checked={props.search.state.multiQueries.length > 0}\n                onChange={(e) => {\n                  if (e.target.checked) {\n                    props.search.setSearch(\"multiQueries\", [\n                      {\n                        query: props.search.state.query,\n                        weight: 0.5,\n                      },\n                    ]);\n                    props.search.setSearch(\"searchType\", \"semantic\");\n                    props.search.setSearch(\"sort_by\", {});\n                  } else {\n                    props.search.setSearch(\"multiQueries\", []);\n                  }\n                }}\n              />\n            </div>\n            <Show when={props.search.state.query !== \"\"}>\n              <div class=\"flex-1\" />\n              <div class=\"flex items-center justify-self-end\">\n                <button\n                  class=\"flex w-fit items-center rounded bg-neutral-100 p-1 text-sm hover:bg-neutral-100 dark:bg-neutral-700 dark:hover:bg-neutral-800\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    props.openRateQueryModal(true);\n                  }}\n                >\n                  <FaRegularFlag class=\"mr-2\" />\n                  Rate This Search\n                </button>\n              </div>\n            </Show>\n            <Show when={!props.groupID}>\n              <Show when={props.search.state.query === \"\"}>\n                <div class=\"flex-1\" />\n              </Show>\n              <div class=\"flex items-center space-x-2 justify-self-center\">\n                <label class=\"text-sm\">Group Search</label>\n                <input\n                  class=\"h-4 w-4\"\n                  type=\"checkbox\"\n                  checked={props.search.state.groupUniqueSearch}\n                  onChange={(e) => {\n                    props.search.setSearch(\n                      \"groupUniqueSearch\",\n                      e.target.checked,\n                    );\n                  }}\n                />\n              </div>\n            </Show>\n          </div>\n        </form>\n      </div>\n    </>\n  );\n};\n\nexport default SearchForm;\n","usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/components/ServerTimings.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":25,"column":24,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":25,"endColumn":37,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":34,"column":37,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":34,"endColumn":53,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/components/ShowToasts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/components/SingleChunkPage.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .chunks on an `any` value.","line":156,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":156,"endColumn":41,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/components/ThemeModeController.tsx","messages":[{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":61,"column":15,"nodeType":"Identifier","messageId":"unboundWithoutThisAnnotation","endLine":61,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Menu,\n  MenuItem,\n  Popover,\n  PopoverButton,\n  PopoverPanel,\n  Transition,\n} from \"solid-headless\";\nimport { createEffect, createSignal } from \"solid-js\";\nimport { BsMoonStars, BsSun } from \"solid-icons/bs\";\nimport { CgScreen } from \"solid-icons/cg\";\n\nexport const setThemeMode = (mode: \"light\" | \"dark\") => {\n  const oppositeMode = mode === \"light\" ? \"dark\" : \"light\";\n  document.documentElement.classList.remove(oppositeMode);\n  window.localStorage.setItem(\"theme\", mode);\n  document.documentElement.classList.add(mode);\n};\n\nexport const getThemeMode = () => {\n  const mode = window.localStorage.getItem(\"theme\");\n  return mode ?? \"system\";\n};\n\nexport const clearThemeMode = () => {\n  window.localStorage.removeItem(\"theme\");\n  if (window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\n    document.documentElement.classList.add(\"dark\");\n  } else {\n    document.documentElement.classList.remove(\"dark\");\n  }\n};\n\nconst ThemeModeController = () => {\n  const [currentTheme, setCurrentTheme] = createSignal(getThemeMode());\n\n  createEffect(() => {\n    const currentThemeMode = getThemeMode();\n\n    if (\n      currentThemeMode == \"dark\" ||\n      (currentThemeMode === \"system\" &&\n        window.matchMedia(\"(prefers-color-scheme: dark)\").matches)\n    ) {\n      document.documentElement.classList.add(\"dark\");\n    }\n  });\n\n  return (\n    <Transition\n      show={true}\n      enter=\"transition duration-2000\"\n      enterFrom=\"opacity-0\"\n      enterTo=\"opacity-100\"\n      leave=\"transition duration-2000\"\n      leaveFrom=\"opacity-100\"\n      leaveTo=\"opacity-0\"\n    >\n      <div class=\"flex w-fit items-center justify-center\">\n        <Popover defaultOpen={false} class=\"relative flex items-center\">\n          {({ isOpen }) => (\n            <>\n              <PopoverButton\n                aria-label=\"Toggle theme mode\"\n                classList={{\n                  \"text-neutral-500\": currentTheme() === \"system\",\n                  \"text-indigo-500\": currentTheme() !== \"system\",\n                }}\n              >\n                <div class=\"hidden dark:block\">\n                  <BsMoonStars class=\"h-6 w-6 fill-current\" />\n                </div>\n                <div class=\"block dark:hidden\">\n                  <BsSun class=\"h-6 w-6 fill-current\" />\n                </div>\n              </PopoverButton>\n              <Transition\n                show={isOpen()}\n                enter=\"transition duration-200\"\n                enterFrom=\"opacity-0\"\n                enterTo=\"opacity-100\"\n                leave=\"transition duration-150\"\n                leaveFrom=\"opacity-100\"\n                leaveTo=\"opacity-0\"\n              >\n                <PopoverPanel\n                  unmount={true}\n                  class=\"absolute z-10 -translate-x-[60%] -translate-y-[115%] transform px-4 sm:px-0\"\n                >\n                  <Menu class=\"flex flex-col space-y-1 overflow-hidden rounded-lg border border-slate-900 bg-neutral-100 p-1 shadow-lg drop-shadow-lg dark:bg-neutral-700 dark:text-white\">\n                    <MenuItem as=\"button\" aria-label=\"Empty\" />\n                    <MenuItem\n                      as=\"div\"\n                      class=\"flex space-x-2 rounded-md px-2 py-1 hover:cursor-pointer focus:bg-neutral-100 focus:outline-none dark:hover:bg-neutral-600 dark:hover:bg-none dark:focus:bg-neutral-600\"\n                      onClick={() => {\n                        setThemeMode(\"light\");\n                        setCurrentTheme(getThemeMode());\n                      }}\n                    >\n                      <div\n                        classList={{\n                          \"text-neutral-500\": currentTheme() === \"system\",\n                          \"text-violet-500\": currentTheme() === \"light\",\n                        }}\n                      >\n                        <BsSun class=\"h-6 w-6 fill-current\" />\n                      </div>\n                      <div>\n                        <div\n                          classList={{\n                            \"text-md font-medium\": true,\n                            \"text-black dark:text-white\":\n                              currentTheme() !== \"light\",\n                            \"text-violet-500\": currentTheme() === \"light\",\n                          }}\n                        >\n                          Light\n                        </div>\n                      </div>\n                    </MenuItem>\n                    <MenuItem\n                      as=\"div\"\n                      class=\"flex space-x-2 rounded-md px-2 py-1 hover:cursor-pointer hover:bg-neutral-100 focus:bg-neutral-100 focus:outline-none dark:hover:bg-neutral-600 dark:focus:bg-neutral-600\"\n                      onClick={() => {\n                        setThemeMode(\"dark\");\n                        setCurrentTheme(getThemeMode());\n                      }}\n                    >\n                      <div\n                        classList={{\n                          \"text-neutral-500\": currentTheme() === \"system\",\n                          \"text-violet-500\": currentTheme() === \"dark\",\n                        }}\n                      >\n                        <BsMoonStars class=\"h-6 w-6 fill-current\" />\n                      </div>\n                      <div>\n                        <div\n                          classList={{\n                            \"text-md font-medium\": true,\n                            \"text-black dark:text-white\":\n                              currentTheme() !== \"dark\",\n                            \"text-violet-500\": currentTheme() === \"dark\",\n                          }}\n                        >\n                          Dark\n                        </div>\n                      </div>\n                    </MenuItem>\n                    <MenuItem\n                      as=\"div\"\n                      class=\"flex space-x-2 rounded-md px-2 py-1 hover:cursor-pointer hover:bg-neutral-100 focus:bg-neutral-100 focus:outline-none dark:hover:bg-neutral-600 dark:focus:bg-neutral-600\"\n                      onClick={() => {\n                        clearThemeMode();\n                        setCurrentTheme(getThemeMode());\n                      }}\n                    >\n                      <div\n                        classList={{\n                          \"text-violet-500\": currentTheme() === \"system\",\n                        }}\n                      >\n                        <CgScreen class=\"h-6 w-6 fill-current\" />\n                      </div>\n                      <div>\n                        <div\n                          classList={{\n                            \"text-md font-medium\": true,\n                            \"text-black dark:text-white\":\n                              currentTheme() !== \"system\",\n                            \"text-violet-500\": currentTheme() === \"system\",\n                          }}\n                        >\n                          System\n                        </div>\n                      </div>\n                    </MenuItem>\n                  </Menu>\n                </PopoverPanel>\n              </Transition>\n            </>\n          )}\n        </Popover>\n      </div>\n    </Transition>\n  );\n};\n\nexport default ThemeModeController;\n","usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/components/TinyEditor.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1830,1833],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1830,1833],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":62,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":62,"endColumn":18,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .on on an `any` value.","line":62,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":62,"endColumn":18,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"solid/reactivity","severity":1,"message":"This function should be passed to a tracked scope (like createEffect) or an event handler because it contains reactivity, or else changes will be ignored.","line":62,"column":38,"nodeType":null,"messageId":"badUnnamedDerivedSignal","endLine":62,"endColumn":40,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":64,"column":32,"nodeType":"CallExpression","messageId":"unsafeArgument","endLine":64,"endColumn":51,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":64,"column":32,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":64,"endColumn":49,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getContent on an `any` value.","line":64,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":64,"endColumn":49,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":67,"column":32,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":67,"endColumn":60,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":67,"column":32,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":67,"endColumn":46,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getBody on an `any` value.","line":67,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":67,"endColumn":46,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .textContent on an `any` value.","line":67,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":67,"endColumn":60,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":70,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":70,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .addShortcut on an `any` value.","line":70,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":70,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":71,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":71,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .execCommand on an `any` value.","line":71,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":71,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":74,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":74,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .addShortcut on an `any` value.","line":74,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":74,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":75,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":75,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .execCommand on an `any` value.","line":75,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":75,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":78,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":78,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .addShortcut on an `any` value.","line":78,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":78,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":79,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":79,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .execCommand on an `any` value.","line":79,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":79,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":82,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":82,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .addShortcut on an `any` value.","line":82,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":82,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":83,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":83,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .execCommand on an `any` value.","line":83,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":83,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":86,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":86,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .addShortcut on an `any` value.","line":86,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":86,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":87,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":87,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .execCommand on an `any` value.","line":87,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":90,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":90,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .addShortcut on an `any` value.","line":90,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":90,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":91,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":91,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .execCommand on an `any` value.","line":91,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":91,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":98,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":98,"endColumn":46,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":98,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3101,3104],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3101,3104],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .tinymce on an `any` value.","line":98,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":98,"endColumn":46,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":100,"column":13,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":100,"endColumn":25,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .init on an `any` value.","line":100,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":100,"endColumn":25,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":103,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":103,"endColumn":41,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":103,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":103,"endColumn":20,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .get on an `any` value.","line":103,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":103,"endColumn":20,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .setContent on an `any` value.","line":103,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":103,"endColumn":41,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":111,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":111,"endColumn":44,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3467,3470],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3467,3470],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .tinymce on an `any` value.","line":111,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":111,"endColumn":44,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":113,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":113,"endColumn":43,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":113,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":113,"endColumn":33,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .get on an `any` value.","line":113,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":113,"endColumn":33,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":115,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":115,"endColumn":22,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .remove on an `any` value.","line":115,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":115,"endColumn":22,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/components/UploadFile.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[655,658],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[655,658],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1182,1185],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1182,1185],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":149,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":149,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":431,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":431,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16506,16509],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16506,16509],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/hooks/useDatasetServerConfig.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/hooks/useSearch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/index.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":57,"column":3,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":57,"endColumn":8,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/layouts/HomeLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/layouts/SearchLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/pages/404.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/pages/CreateChunk.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/pages/Upload.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/pages/chunk/ViewChunk.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[274,277],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[274,277],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":11,"column":18,"nodeType":"MemberExpression","messageId":"anyAssignment","endLine":11,"endColumn":33,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .params on an `any` value.","line":11,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":11,"endColumn":30,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/pages/chunk/edit/EditChunk.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[324,327],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[324,327],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":22,"column":22,"nodeType":"MemberExpression","messageId":"anyAssignment","endLine":22,"endColumn":37,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .params on an `any` value.","line":22,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":22,"endColumn":34,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/pages/group/OrgGroups.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/pages/group/ViewGroup.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[317,320],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[317,320],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .params on an `any` value.","line":12,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":12,"endColumn":28,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/utils/apiTypes.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":443,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":443,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11839,11842],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11839,11842],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":444,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":444,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11884,11887],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11884,11887],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":520,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":520,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14142,14145],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14142,14145],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/utils/downloadFile.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/utils/trieve.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/skeptrune/git_projects/devflowinc/trieve/frontends/search/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]